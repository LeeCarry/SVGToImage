<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Svg</name>
    </assembly>
    <members>
        <member name="T:Svg.SvgImage">
            <summary>
            Represents and SVG image
            </summary>
        </member>
        <member name="M:Svg.SvgImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgImage"/> class.
            </summary>
        </member>
        <member name="P:Svg.SvgImage.Location">
            <summary>
            Gets an <see cref="T:Svg.SvgPoint"/> representing the top left point of the rectangle.
            </summary>
        </member>
        <member name="P:Svg.SvgImage.AspectRatio">
            <summary>
            Gets or sets the aspect of the viewport.
            </summary>
            <value></value>
        </member>
        <member name="P:Svg.SvgImage.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Svg.SvgImage.Path(Svg.ISvgRenderer)">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
        </member>
        <member name="M:Svg.SvgImage.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
        </member>
        <member name="T:Svg.SvgVisualElement">
            <summary>
            The class that all SVG elements should derive from when they are to be rendered.
            </summary>
        </member>
        <member name="M:Svg.SvgVisualElement.Path(Svg.ISvgRenderer)">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
        </member>
        <member name="P:Svg.SvgVisualElement.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Svg.SvgVisualElement.Clip">
            <summary>
            Gets the associated <see cref="T:Svg.SvgClipPath"/> if one has been specified.
            </summary>
        </member>
        <member name="P:Svg.SvgVisualElement.ClipPath">
            <summary>
            Gets the associated <see cref="T:Svg.SvgClipPath"/> if one has been specified.
            </summary>
        </member>
        <member name="P:Svg.SvgVisualElement.ClipRule">
            <summary>
            Gets or sets the algorithm which is to be used to determine the clipping region.
            </summary>
        </member>
        <member name="P:Svg.SvgVisualElement.Filter">
            <summary>
            Gets the associated <see cref="T:Svg.SvgClipPath"/> if one has been specified.
            </summary>
        </member>
        <member name="P:Svg.SvgVisualElement.RequiresSmoothRendering">
            <summary>
            Gets or sets a value to determine if anti-aliasing should occur when the element is being rendered.
            </summary>
        </member>
        <member name="M:Svg.SvgVisualElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:SvgGraphicsElement"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgVisualElement.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Svg.SvgVisualElement.RenderFill(Svg.ISvgRenderer)">
            <summary>
            Renders the fill of the <see cref="T:Svg.SvgVisualElement"/> to the specified <see cref="T:Svg.ISvgRenderer"/>
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Svg.SvgVisualElement.RenderStroke(Svg.ISvgRenderer)">
            <summary>
            Renders the stroke of the <see cref="T:Svg.SvgVisualElement"/> to the specified <see cref="T:Svg.ISvgRenderer"/>
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Svg.SvgVisualElement.SetClip(Svg.ISvgRenderer)">
            <summary>
            Sets the clipping region of the specified <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to have its clipping region set.</param>
        </member>
        <member name="M:Svg.SvgVisualElement.ResetClip(Svg.ISvgRenderer)">
            <summary>
            Resets the clipping region of the specified <see cref="T:Svg.ISvgRenderer"/> back to where it was before the <see cref="M:Svg.SvgVisualElement.SetClip(Svg.ISvgRenderer)"/> method was called.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to have its clipping region reset.</param>
        </member>
        <member name="M:Svg.SvgVisualElement.Svg#ISvgClipable#SetClip(Svg.ISvgRenderer)">
            <summary>
            Sets the clipping region of the specified <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to have its clipping region set.</param>
        </member>
        <member name="M:Svg.SvgVisualElement.Svg#ISvgClipable#ResetClip(Svg.ISvgRenderer)">
            <summary>
            Resets the clipping region of the specified <see cref="T:Svg.ISvgRenderer"/> back to where it was before the <see cref="M:Svg.SvgVisualElement.SetClip(Svg.ISvgRenderer)"/> method was called.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to have its clipping region reset.</param>
        </member>
        <member name="P:Svg.SvgVisualElement.Visible">
            <summary>
            Gets or sets a value to determine whether the element will be rendered.
            </summary>
        </member>
        <member name="P:Svg.SvgVisualElement.Display">
            <summary>
            Gets or sets a value to determine whether the element will be rendered.
            Needed to support SVG attribute display="none"
            </summary>
        </member>
        <member name="P:Svg.SvgVisualElement.EnableBackground">
            <summary>
            Gets or sets the fill <see cref="T:Svg.SvgPaintServer"/> of this element.
            </summary>
        </member>
        <member name="T:Svg.SvgCircle">
            <summary>
            An SVG element to render circles to the document.
            </summary>
        </member>
        <member name="P:Svg.SvgCircle.Center">
            <summary>
            Gets the center point of the circle.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:Svg.SvgCircle.Bounds">
            <summary>
            Gets the bounds of the circle.
            </summary>
            <value>The rectangular bounds of the circle.</value>
        </member>
        <member name="M:Svg.SvgCircle.Path(Svg.ISvgRenderer)">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> representing this element.
            </summary>
        </member>
        <member name="M:Svg.SvgCircle.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the circle to the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="graphics">The graphics object.</param>
        </member>
        <member name="M:Svg.SvgCircle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgCircle"/> class.
            </summary>
        </member>
        <member name="T:Svg.SvgEllipse">
            <summary>
            Represents and SVG ellipse element.
            </summary>
        </member>
        <member name="P:Svg.SvgEllipse.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Svg.SvgEllipse.Path(Svg.ISvgRenderer)">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="M:Svg.SvgEllipse.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to render to.</param>
        </member>
        <member name="M:Svg.SvgEllipse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgEllipse"/> class.
            </summary>
        </member>
        <member name="T:Svg.SvgLine">
            <summary>
            Represents and SVG line element.
            </summary>
        </member>
        <member name="P:Svg.SvgLine.MarkerEnd">
            <summary>
            Gets or sets the marker (end cap) of the path.
            </summary>
        </member>
        <member name="P:Svg.SvgLine.MarkerMid">
            <summary>
            Gets or sets the marker (start cap) of the path.
            </summary>
        </member>
        <member name="P:Svg.SvgLine.MarkerStart">
            <summary>
            Gets or sets the marker (start cap) of the path.
            </summary>
        </member>
        <member name="M:Svg.SvgLine.RenderStroke(Svg.ISvgRenderer)">
            <summary>
            Renders the stroke of the <see cref="T:Svg.SvgVisualElement"/> to the specified <see cref="T:Svg.ISvgRenderer"/>
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="T:Svg.SvgPolygon">
            <summary>
            SvgPolygon defines a closed shape consisting of a set of connected straight line segments.
            </summary>
        </member>
        <member name="P:Svg.SvgPolygon.Points">
            <summary>
            The points that make up the SvgPolygon
            </summary>
        </member>
        <member name="P:Svg.SvgPolygon.MarkerEnd">
            <summary>
            Gets or sets the marker (end cap) of the path.
            </summary>
        </member>
        <member name="P:Svg.SvgPolygon.MarkerMid">
            <summary>
            Gets or sets the marker (start cap) of the path.
            </summary>
        </member>
        <member name="P:Svg.SvgPolygon.MarkerStart">
            <summary>
            Gets or sets the marker (start cap) of the path.
            </summary>
        </member>
        <member name="M:Svg.SvgPolygon.RenderStroke(Svg.ISvgRenderer)">
            <summary>
            Renders the stroke of the <see cref="T:Svg.SvgVisualElement"/> to the specified <see cref="T:Svg.ISvgRenderer"/>
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="T:Svg.SvgPolyline">
            <summary>
            SvgPolyline defines a set of connected straight line segments. Typically, <see cref="T:Svg.SvgPolyline"/> defines open shapes.
            </summary>
        </member>
        <member name="P:Svg.SvgPolyline.MarkerEnd">
            <summary>
            Gets or sets the marker (end cap) of the path.
            </summary>
        </member>
        <member name="P:Svg.SvgPolyline.MarkerMid">
            <summary>
            Gets or sets the marker (start cap) of the path.
            </summary>
        </member>
        <member name="P:Svg.SvgPolyline.MarkerStart">
            <summary>
            Gets or sets the marker (start cap) of the path.
            </summary>
        </member>
        <member name="M:Svg.SvgPolyline.RenderStroke(Svg.ISvgRenderer)">
            <summary>
            Renders the stroke of the <see cref="T:Svg.SvgVisualElement"/> to the specified <see cref="T:Svg.ISvgRenderer"/>
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="T:Svg.ISvgClipable">
            <summary>
            Defines the methods and properties that an <see cref="T:Svg.SvgElement"/> must implement to support clipping.
            </summary>
        </member>
        <member name="P:Svg.ISvgClipable.ClipPath">
            <summary>
            Gets or sets the ID of the associated <see cref="T:Svg.SvgClipPath"/> if one has been specified.
            </summary>
        </member>
        <member name="P:Svg.ISvgClipable.ClipRule">
            <summary>
            Specifies the rule used to define the clipping region when the element is within a <see cref="T:Svg.SvgClipPath"/>.
            </summary>
        </member>
        <member name="M:Svg.ISvgClipable.SetClip(Svg.ISvgRenderer)">
            <summary>
            Sets the clipping region of the specified <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to have its clipping region set.</param>
        </member>
        <member name="M:Svg.ISvgClipable.ResetClip(Svg.ISvgRenderer)">
            <summary>
            Resets the clipping region of the specified <see cref="T:Svg.ISvgRenderer"/> back to where it was before the <see cref="M:Svg.ISvgClipable.SetClip(Svg.ISvgRenderer)"/> method was called.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to have its clipping region reset.</param>
        </member>
        <member name="T:Svg.SvgClipRule">
            <summary>
            Indicates the algorithm which is to be used to determine the clipping region.
            </summary>
            <remarks>
                <para>This rule determines the "insideness" of a point on the canvas by drawing a ray from 
                that point to infinity in any direction and then examining the places where a segment of the 
                shape crosses the ray.</para>
            </remarks>
        </member>
        <member name="F:Svg.SvgClipRule.NonZero">
            <summary>
            This rule determines the "insideness" of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside  the path. Otherwise, it is inside.
            </summary>
        </member>
        <member name="F:Svg.SvgClipRule.EvenOdd">
            <summary>
            This rule determines the "insideness" of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.
            </summary>
        </member>
        <member name="T:Svg.SvgClipPath">
            <summary>
            Defines a path that can be used by other <see cref="T:Svg.ISvgClipable"/> elements.
            </summary>
        </member>
        <member name="P:Svg.SvgClipPath.ClipPathUnits">
            <summary>
            Specifies the coordinate system for the clipping path.
            </summary>
        </member>
        <member name="M:Svg.SvgClipPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgClipPath"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgClipPath.GetClipRegion(Svg.SvgVisualElement)">
            <summary>
            Gets this <see cref="T:Svg.SvgClipPath"/>'s region to be used as a clipping region.
            </summary>
            <returns>A new <see cref="T:System.Drawing.Region"/> containing the <see cref="T:System.Drawing.Region"/> to be used for clipping.</returns>
        </member>
        <member name="M:Svg.SvgClipPath.CombinePaths(System.Drawing.Drawing2D.GraphicsPath,Svg.SvgElement)">
            <summary>
            
            </summary>
            <param name="region"></param>
            <param name="element"></param>
        </member>
        <member name="M:Svg.SvgClipPath.AddElement(Svg.SvgElement,System.Int32)">
            <summary>
            Called by the underlying <see cref="T:Svg.SvgElement"/> when an element has been added to the
            <see cref="!:Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:Svg.SvgElement"/> that has been added.</param>
            <param name="index">An <see cref="T:System.Int32"/> representing the index where the element was added to the collection.</param>
        </member>
        <member name="M:Svg.SvgClipPath.RemoveElement(Svg.SvgElement)">
            <summary>
            Called by the underlying <see cref="T:Svg.SvgElement"/> when an element has been removed from the
            <see cref="P:Svg.SvgElement.Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:Svg.SvgElement"/> that has been removed.</param>
        </member>
        <member name="M:Svg.SvgClipPath.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:Svg.ISvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="T:Svg.SvgPointCollection">
            <summary>
            Represents a list of <see cref="!:SvgUnits"/> used with the <see cref="T:Svg.SvgPolyline"/> and <see cref="T:Svg.SvgPolygon"/>.
            </summary>
        </member>
        <member name="T:Svg.SvgPointCollectionConverter">
            <summary>
            A class to convert string into <see cref="T:Svg.SvgUnitCollection"/> instances.
            </summary>
        </member>
        <member name="M:Svg.SvgPointCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Svg.SvgTextDecoration">
            <summary>This property describes decorations that are added to the text of an element. Conforming SVG Viewers are not required to support the blink value.</summary>
        </member>
        <member name="F:Svg.SvgTextDecoration.Inherit">
            <summary>The value is inherited from the parent element.</summary>
        </member>
        <member name="F:Svg.SvgTextDecoration.None">
            <summary>The text is not decorated</summary>
        </member>
        <member name="F:Svg.SvgTextDecoration.Underline">
            <summary>The text is underlined.</summary>
        </member>
        <member name="F:Svg.SvgTextDecoration.Overline">
            <summary>The text is overlined.</summary>
        </member>
        <member name="F:Svg.SvgTextDecoration.LineThrough">
            <summary>The text is struck through.</summary>
        </member>
        <member name="F:Svg.SvgTextDecoration.Blink">
            <summary>The text will blink.</summary>
        </member>
        <member name="T:Svg.SvgTextLengthAdjust">
            <summary>Indicates the type of adjustments which the user agent shall make to make the rendered length of the text match the value specified on the ‘textLength’ attribute.</summary>
            <remarks>
                <para>The user agent is required to achieve correct start and end positions for the text strings, but the locations of intermediate glyphs are not predictable because user agents might employ advanced algorithms to stretch or compress text strings in order to balance correct start and end positioning with optimal typography.</para>
                <para>Note that, for a text string that contains n characters, the adjustments to the advance values often occur only for n−1 characters (see description of attribute ‘textLength’), whereas stretching or compressing of the glyphs will be applied to all n characters.</para>
            </remarks>
        </member>
        <member name="F:Svg.SvgTextLengthAdjust.Spacing">
            <summary>Indicates that only the advance values are adjusted. The glyphs themselves are not stretched or compressed.</summary>
        </member>
        <member name="F:Svg.SvgTextLengthAdjust.SpacingAndGlyphs">
            <summary>Indicates that the advance values are adjusted and the glyphs themselves stretched or compressed in one axis (i.e., a direction parallel to the inline-progression-direction).</summary>
        </member>
        <member name="T:Svg.SvgTextPathMethod">
            <summary>Indicates the method by which text should be rendered along the path.</summary>
        </member>
        <member name="F:Svg.SvgTextPathMethod.Align">
            <summary>Indicates that the glyphs should be rendered using simple 2x3 transformations such that there is no stretching/warping of the glyphs. Typically, supplemental rotation, scaling and translation transformations are done for each glyph to be rendered. As a result, with align, fonts where the glyphs are designed to be connected (e.g., cursive fonts), the connections may not align properly when text is rendered along a path.</summary>
        </member>
        <member name="F:Svg.SvgTextPathMethod.Stretch">
            <summary>Indicates that the glyph outlines will be converted into paths, and then all end points and control points will be adjusted to be along the perpendicular vectors from the path, thereby stretching and possibly warping the glyphs. With this approach, connected glyphs, such as in cursive scripts, will maintain their connections.</summary>
        </member>
        <member name="T:Svg.SvgTextPathSpacing">
            <summary>Indicates how the user agent should determine the spacing between glyphs that are to be rendered along a path.</summary>
        </member>
        <member name="F:Svg.SvgTextPathSpacing.Exact">
            <summary>Indicates that the glyphs should be rendered exactly according to the spacing rules as specified in Text on a path layout rules.</summary>
        </member>
        <member name="F:Svg.SvgTextPathSpacing.Auto">
            <summary>Indicates that the user agent should use text-on-a-path layout algorithms to adjust the spacing between glyphs in order to achieve visually appealing results.</summary>
        </member>
        <member name="T:Svg.Document_Structure.SvgSymbol">
            <summary>
            An element used to group SVG shapes.
            </summary>
        </member>
        <member name="P:Svg.Document_Structure.SvgSymbol.ViewBox">
            <summary>
            Gets or sets the viewport of the element.
            </summary>
            <value></value>
        </member>
        <member name="P:Svg.Document_Structure.SvgSymbol.AspectRatio">
            <summary>
            Gets or sets the aspect of the viewport.
            </summary>
            <value></value>
        </member>
        <member name="M:Svg.Document_Structure.SvgSymbol.Path(Svg.ISvgRenderer)">
            <summary>
            Gets the <see cref="!:GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="P:Svg.Document_Structure.SvgSymbol.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Svg.Document_Structure.SvgSymbol.PushTransforms(Svg.ISvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to be transformed.</param>
        </member>
        <member name="T:Svg.FilterEffects.SvgColourMatrix">
            <summary>
            Note: this is not used in calculations to bitmap - used only to allow for svg xml output
            </summary>
        </member>
        <member name="P:Svg.FilterEffects.SvgColourMatrix.Type">
            <summary>
            matrix | saturate | hueRotate | luminanceToAlpha
            Indicates the type of matrix operation. The keyword 'matrix' indicates that a full 5x4 matrix of values will be provided. The other keywords represent convenience shortcuts to allow commonly used color operations to be performed without specifying a complete matrix. If attribute ‘type’ is not specified, then the effect is as if a value of matrix were specified.
            Note: this is not used in calculations to bitmap - used only to allow for svg xml output
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Svg.FilterEffects.SvgColourMatrix.Values" -->
        <member name="T:Svg.FilterEffects.SvgOffset">
            <summary>
            Note: this is not used in calculations to bitmap - used only to allow for svg xml output
            </summary>
        </member>
        <member name="P:Svg.FilterEffects.SvgOffset.Dx">
            <summary>
            The amount to offset the input graphic along the x-axis. The offset amount is expressed in the coordinate system established by attribute ‘primitiveUnits’ on the ‘filter’ element.
            If the attribute is not specified, then the effect is as if a value of 0 were specified.
            Note: this is not used in calculations to bitmap - used only to allow for svg xml output
            </summary>
        </member>
        <member name="P:Svg.FilterEffects.SvgOffset.Dy">
            <summary>
            The amount to offset the input graphic along the y-axis. The offset amount is expressed in the coordinate system established by attribute ‘primitiveUnits’ on the ‘filter’ element.
            If the attribute is not specified, then the effect is as if a value of 0 were specified.
            Note: this is not used in calculations to bitmap - used only to allow for svg xml output
            </summary>
        </member>
        <member name="T:Svg.FilterEffects.SvgFilter">
            <summary>
            A filter effect consists of a series of graphics operations that are applied to a given source graphic to produce a modified graphical result.
            </summary>
        </member>
        <member name="P:Svg.FilterEffects.SvgFilter.X">
            <summary>
            Gets or sets the position where the left point of the filter.
            </summary>
        </member>
        <member name="P:Svg.FilterEffects.SvgFilter.Y">
            <summary>
            Gets or sets the position where the top point of the filter.
            </summary>
        </member>
        <member name="P:Svg.FilterEffects.SvgFilter.Width">
            <summary>
            Gets or sets the width of the resulting filter graphic.
            </summary>
        </member>
        <member name="P:Svg.FilterEffects.SvgFilter.Height">
            <summary>
            Gets or sets the height of the resulting filter graphic.
            </summary>
        </member>
        <member name="P:Svg.FilterEffects.SvgFilter.ColorInterpolationFilters">
            <summary>
            Gets or sets the color-interpolation-filters of the resulting filter graphic.
            NOT currently mapped through to bitmap
            </summary>
        </member>
        <member name="M:Svg.FilterEffects.SvgFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.FilterEffects.SvgFilter"/> class.
            </summary>
        </member>
        <member name="M:Svg.FilterEffects.SvgFilter.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:Svg.ISvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Svg.FilterEffects.SvgFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Svg.FilterEffects.SvgGaussianBlur.StdDeviation">
            <summary>
            Gets or sets the radius of the blur (only allows for one value - not the two specified in the SVG Spec)
            </summary>
        </member>
        <member name="T:Svg.SvgFallbackPaintServer">
            <summary>
            A wrapper for a paint server has a fallback if the primary server doesn't work.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Svg.SvgShapeRendering" -->
        <member name="F:Svg.SvgShapeRendering.Inherit">
            <summary>
            Indicates that the SVG shape rendering properties from the parent will be used.
            </summary>
            <AnitAlias>Based of parent. If parents are also not set, then <see cref="F:Svg.SvgShapeRendering.Auto"/></AnitAlias>
        </member>
        <member name="F:Svg.SvgShapeRendering.Auto">
            <summary>
            Indicates that the user agent shall make appropriate tradeoffs to balance speed, crisp edges and geometric precision, but with geometric precision given more importance than speed and crisp edges.
            </summary>
            <AnitAlias>true</AnitAlias>
        </member>
        <member name="F:Svg.SvgShapeRendering.OptimizeSpeed">
            <summary>
            Indicates that the user agent shall emphasize rendering speed over geometric precision and crisp edges. This option will sometimes cause the user agent to turn off shape anti-aliasing.
            </summary>
            <AnitAlias>false</AnitAlias>
        </member>
        <member name="F:Svg.SvgShapeRendering.CrispEdges">
            <summary>
            Indicates that the user agent shall attempt to emphasize the contrast between clean edges of artwork over rendering speed and geometric precision. To achieve crisp edges, the user agent might turn off anti-aliasing for all lines and curves or possibly just for straight lines which are close to vertical or horizontal. Also, the user agent might adjust line positions and line widths to align edges with device pixels.
            </summary>
            <AnitAlias>false</AnitAlias>
        </member>
        <member name="F:Svg.SvgShapeRendering.GeometricPrecision">
            <summary>
            Indicates that the user agent shall emphasize geometric precision over speed and crisp edges.
            </summary>
            <AnitAlias>false</AnitAlias>
        </member>
        <member name="T:Svg.SvgTextRendering">
            <summary>
            The creator of SVG content might want to provide a hint about what tradeoffs to make as the browser renders text. The text-rendering attribute provides these hints.
            </summary>
            <references>https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-rendering</references>
            <remarks>Not Implemented yet.</remarks>
        </member>
        <member name="F:Svg.SvgTextRendering.Inherit">
            <summary>
            Indicates that the SVG shape rendering properties from the parent will be used.
            </summary>
        </member>
        <member name="F:Svg.SvgTextRendering.Auto">
            <summary>
            Indicates that the browser shall make appropriate tradeoffs to balance speed, legibility and geometric precision, but with legibility given more importance than speed and geometric precision.
            </summary>
        </member>
        <member name="F:Svg.SvgTextRendering.OptimizeSpeed">
            <summary>
            Indicates that the user agent shall emphasize rendering speed over legibility and geometric precision. This option will sometimes cause some browsers to turn off text anti-aliasing.
            </summary>
        </member>
        <member name="F:Svg.SvgTextRendering.OptimizeLegibility">
            <summary>
            Indicates that the browser shall emphasize legibility over rendering speed and geometric precision. The user agent will often choose whether to apply anti-aliasing techniques, built-in font hinting or both to produce the most legible text.
            </summary>
        </member>
        <member name="F:Svg.SvgTextRendering.GeometricPrecision">
            <summary>
            Indicates that the browser shall emphasize geometric precision over legibility and rendering speed. This option will usually cause the user agent to suspend the use of hinting so that glyph outlines are drawn with comparable geometric precision to the rendering of path data.
            </summary>
        </member>
        <member name="T:Svg.SvgImageRendering">
            <summary>
            The image-rendering attribute provides a hint to the browser about how to make speed vs. quality tradeoffs as it performs image processing.
            </summary>
            <references>https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/image-rendering</references>
            <remarks>Not Implemented yet.</remarks>
        </member>
        <member name="F:Svg.SvgImageRendering.Inherit">
            <summary>
            Indicates that the SVG shape rendering properties from the parent will be used.
            </summary>
        </member>
        <member name="F:Svg.SvgImageRendering.Auto">
            <summary>
            Indicates that the user agent shall make appropriate tradeoffs to balance speed and quality, but quality shall be given more importance than speed.
            </summary>
        </member>
        <member name="F:Svg.SvgImageRendering.OptimizeSpeed">
            <summary>
            Indicates that the user agent shall emphasize rendering speed over quality.
            </summary>
        </member>
        <member name="F:Svg.SvgImageRendering.OptimizeQuality">
            <summary>
            Indicates that the user agent shall emphasize quality over rendering speed.
            </summary>
        </member>
        <member name="T:Svg.SvgElement">
            <summary>
            The base class of which all SVG elements are derived from.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.IsPathDirty">
            <summary>
            Gets or sets a value indicating whether this element's <see cref="!:Path"/> is dirty.
            </summary>
            <value>
            	<c>true</c> if the path is dirty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Svg.SvgElement.Fill">
            <summary>
            Gets or sets the fill <see cref="T:Svg.SvgPaintServer"/> of this element.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.Stroke">
            <summary>
            Gets or sets the <see cref="T:Svg.SvgPaintServer"/> to be used when rendering a stroke around this element.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.FillOpacity">
            <summary>
            Gets or sets the opacity of this element's <see cref="P:Svg.SvgElement.Fill"/>.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke (if the <see cref="P:Svg.SvgElement.Stroke"/> property has a valid value specified.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.StrokeOpacity">
            <summary>
            Gets or sets the opacity of the stroke, if the <see cref="P:Svg.SvgElement.Stroke"/> property has been specified. 1.0 is fully opaque; 0.0 is transparent.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.StopColor">
            <summary>
            Gets or sets the colour of the gradient stop.
            </summary>
            <remarks>Apparently this can be set on non-sensical elements.  Don't ask; just check the tests.</remarks>
        </member>
        <member name="P:Svg.SvgElement.Opacity">
            <summary>
            Gets or sets the opacity of the element. 1.0 is fully opaque; 0.0 is transparent.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.ShapeRendering">
            <summary>
            Refers to the AnitAlias rendering of shapes.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.FontFamily">
            <summary>
            Indicates which font family is to be used to render the text.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.FontSize">
            <summary>
            Refers to the size of the font from baseline to baseline when multiple lines of text are set solid in a multiline layout environment.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.FontStyle">
            <summary>
            Refers to the style of the font.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.FontVariant">
            <summary>
            Refers to the varient of the font.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.TextDecoration">
            <summary>
            Refers to the boldness of the font.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.FontWeight">
            <summary>
            Refers to the boldness of the font.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.Font">
            <summary>
            Set all font information.
            </summary>
        </member>
        <member name="M:Svg.SvgElement.GetFont(Svg.ISvgRenderer)">
            <summary>
            Get the font information based on data stored with the text object or inherited from the parent.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Svg.SvgElement.ElementName">
            <summary>
            Gets the name of the element.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.Color">
            <summary>
            Gets or sets the color <see cref="T:Svg.SvgPaintServer"/> of this element which drives the currentColor property.
            </summary>
        </member>
        <member name="F:Svg.SvgElement._content">
            <summary>
            Gets or sets the content of the element.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.Events">
            <summary>
            Gets an <see cref="T:System.ComponentModel.EventHandlerList"/> of all events belonging to the element.
            </summary>
        </member>
        <member name="E:Svg.SvgElement.Load">
            <summary>
            Occurs when the element is loaded.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.Children">
            <summary>
            Gets a collection of all child <see cref="!:SvgElements"/>.
            </summary>
        </member>
        <member name="M:Svg.SvgElement.HasChildren">
            <summary>
            Gets a value to determine whether the element has children.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.Parent">
            <summary>
            Gets the parent <see cref="T:Svg.SvgElement"/>.
            </summary>
            <value>An <see cref="T:Svg.SvgElement"/> if one exists; otherwise null.</value>
        </member>
        <member name="P:Svg.SvgElement.OwnerDocument">
            <summary>
            Gets the owner <see cref="T:Svg.SvgDocument"/>.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.Attributes">
            <summary>
            Gets a collection of element attributes.
            </summary>
        </member>
        <member name="P:Svg.SvgElement.CustomAttributes">
            <summary>
            Gets a collection of custom attributes
            </summary>
        </member>
        <member name="M:Svg.SvgElement.PushTransforms(Svg.ISvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:Svg.SvgElement.PopTransforms(Svg.ISvgRenderer)">
            <summary>
            Removes any previously applied transforms from the specified <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> that should have transforms removed.</param>
        </member>
        <member name="M:Svg.SvgElement.Svg#ISvgTransformable#PushTransforms(Svg.ISvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:Svg.SvgElement.Svg#ISvgTransformable#PopTransforms(Svg.ISvgRenderer)">
            <summary>
            Removes any previously applied transforms from the specified <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> that should have transforms removed.</param>
        </member>
        <member name="P:Svg.SvgElement.Transforms">
            <summary>
            Gets or sets the element transforms.
            </summary>
            <value>The transforms.</value>
        </member>
        <member name="P:Svg.SvgElement.ID">
            <summary>
            Gets or sets the ID of the element.
            </summary>
            <exception cref="T:Svg.SvgException">The ID is already used within the <see cref="T:Svg.SvgDocument"/>.</exception>
        </member>
        <member name="P:Svg.SvgElement.SpaceHandling">
            <summary>
            Gets or sets the text anchor.
            </summary>
            <value>The text anchor.</value>
        </member>
        <member name="M:Svg.SvgElement.ForceUniqueID(System.String)">
            <summary>
            Only used by the ID Manager
            </summary>
            <param name="newID"></param>
        </member>
        <member name="M:Svg.SvgElement.AddElement(Svg.SvgElement,System.Int32)">
            <summary>
            Called by the underlying <see cref="T:Svg.SvgElement"/> when an element has been added to the
            <see cref="P:Svg.SvgElement.Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:Svg.SvgElement"/> that has been added.</param>
            <param name="index">An <see cref="T:System.Int32"/> representing the index where the element was added to the collection.</param>
        </member>
        <member name="E:Svg.SvgElement.ChildAdded">
            <summary>
            Fired when an Element was added to the children of this Element
            </summary>
        </member>
        <member name="M:Svg.SvgElement.OnElementAdded(Svg.SvgElement,System.Int32)">
            <summary>
            Calls the <see cref="M:Svg.SvgElement.AddElement(Svg.SvgElement,System.Int32)"/> method with the specified parameters.
            </summary>
            <param name="child">The <see cref="T:Svg.SvgElement"/> that has been added.</param>
            <param name="index">An <see cref="T:System.Int32"/> representing the index where the element was added to the collection.</param>
        </member>
        <member name="M:Svg.SvgElement.RemoveElement(Svg.SvgElement)">
            <summary>
            Called by the underlying <see cref="T:Svg.SvgElement"/> when an element has been removed from the
            <see cref="P:Svg.SvgElement.Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:Svg.SvgElement"/> that has been removed.</param>
        </member>
        <member name="M:Svg.SvgElement.OnElementRemoved(Svg.SvgElement)">
            <summary>
            Calls the <see cref="M:Svg.SvgElement.RemoveElement(Svg.SvgElement)"/> method with the specified <see cref="T:Svg.SvgElement"/> as the parameter.
            </summary>
            <param name="child">The <see cref="T:Svg.SvgElement"/> that has been removed.</param>
        </member>
        <member name="M:Svg.SvgElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgElement"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgElement.RenderElement(Svg.ISvgRenderer)">
            <summary>
            Renders this element to the <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> that the element should use to render itself.</param>
        </member>
        <member name="M:Svg.SvgElement.ShouldWriteElement">
            <summary>Derrived classes may decide that the element should not be written. For example, the text element shouldn't be written if it's empty.</summary>
        </member>
        <member name="M:Svg.SvgElement.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:Svg.ISvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Svg.SvgElement.RenderChildren(Svg.ISvgRenderer)">
            <summary>
            Renders the children of this <see cref="T:Svg.SvgElement"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to render the child <see cref="T:Svg.SvgElement"/>s to.</param>
        </member>
        <member name="M:Svg.SvgElement.Svg#ISvgElement#Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:Svg.ISvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Svg.SvgElement.AddPaths(Svg.SvgElement,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Recursive method to add up the paths of all children
            </summary>
            <param name="elem"></param>
            <param name="path"></param>
        </member>
        <member name="M:Svg.SvgElement.GetPaths(Svg.SvgElement,Svg.ISvgRenderer)">
            <summary>
            Recursive method to add up the paths of all children
            </summary>
            <param name="elem"></param>
            <param name="path"></param>
        </member>
        <member name="M:Svg.SvgElement.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="E:Svg.SvgElement.AttributeChanged">
            <summary>
            Fired when an Atrribute of this Element has changed
            </summary>
        </member>
        <member name="E:Svg.SvgElement.ContentChanged">
            <summary>
            Fired when an Atrribute of this Element has changed
            </summary>
        </member>
        <member name="P:Svg.SvgNodeReader.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
            <value></value>
            <returns>The value returned depends on the <see cref="P:System.Xml.XmlTextReader.NodeType"/> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space within an xml:space= 'preserve' scope. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
        </member>
        <member name="P:Svg.SvgNodeReader.LocalName">
            <summary>
            Gets the local name of the current node.
            </summary>
            <value></value>
            <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
        </member>
        <member name="M:Svg.SvgNodeReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>
            true if there is a next attribute; false if there are no more attributes.
            </returns>
        </member>
        <member name="M:Svg.SvgNodeReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>
            true if the next node was read successfully; false if there are no more nodes to read.
            </returns>
            <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
        </member>
        <member name="M:Svg.SvgNodeReader.ResolveEntity">
            <summary>
            Resolves the entity reference for EntityReference nodes.
            </summary>
        </member>
        <member name="T:Svg.DataTypes.SvgMarkerUnits">
            <summary>Defines the coordinate system for attributes ‘markerWidth’, ‘markerHeight’ and the contents of the ‘marker’.</summary>
        </member>
        <member name="F:Svg.DataTypes.SvgMarkerUnits.StrokeWidth">
            <summary>If markerUnits="strokeWidth", ‘markerWidth’, ‘markerHeight’ and the contents of the ‘marker’ represent values in a coordinate system which has a single unit equal the size in user units of the current stroke width (see the ‘stroke-width’ property) in place for the graphic object referencing the marker.</summary>
        </member>
        <member name="F:Svg.DataTypes.SvgMarkerUnits.UserSpaceOnUse">
            <summary>If markerUnits="userSpaceOnUse", ‘markerWidth’, ‘markerHeight’ and the contents of the ‘marker’ represent values in the current user coordinate system in place for the graphic object referencing the marker (i.e., the user coordinate system for the element referencing the ‘marker’ element via a ‘marker’, ‘marker-start’, ‘marker-mid’ or ‘marker-end’ property).</summary>
        </member>
        <member name="T:Svg.DataTypes.SvgColourInterpolation">
            <summary>Specifies the color space for gradient interpolations, color animations and alpha compositing.</summary>
            <remarks>When a child element is blended into a background, the value of the ‘color-interpolation’ property on the child determines the type of blending, not the value of the ‘color-interpolation’ on the parent. For gradients which make use of the ‘xlink:href’ attribute to reference another gradient, the gradient uses the ‘color-interpolation’ property value from the gradient element which is directly referenced by the ‘fill’ or ‘stroke’ property. When animating colors, color interpolation is performed according to the value of the ‘color-interpolation’ property on the element being animated.</remarks>
        </member>
        <member name="F:Svg.DataTypes.SvgColourInterpolation.Auto">
            <summary>Indicates that the user agent can choose either the sRGB or linearRGB spaces for color interpolation. This option indicates that the author doesn't require that color interpolation occur in a particular color space.</summary>
        </member>
        <member name="F:Svg.DataTypes.SvgColourInterpolation.SRGB">
            <summary>Indicates that color interpolation should occur in the sRGB color space.</summary>
        </member>
        <member name="F:Svg.DataTypes.SvgColourInterpolation.LinearRGB">
            <summary>Indicates that color interpolation should occur in the linearized RGB color space as described above.</summary>
        </member>
        <member name="F:Svg.DataTypes.SvgColourInterpolation.Inherit">
            <summary>The value is inherited from the parent element.</summary>
        </member>
        <member name="T:Svg.SvgFontStyle">
            <summary>This is the descriptor for the style of a font and takes the same values as the 'font-style' property, except that a comma-separated list is permitted.</summary>
        </member>
        <member name="F:Svg.SvgFontStyle.All">
            <summary>Indicates that the font-face supplies all styles (normal, oblique and italic).</summary>
        </member>
        <member name="F:Svg.SvgFontStyle.Normal">
            <summary>Specifies a font that is classified as 'normal' in the UA's font database.</summary>
        </member>
        <member name="F:Svg.SvgFontStyle.Oblique">
            <summary>Specifies a font that is classified as 'oblique' in the UA's font database. Fonts with Oblique, Slanted, or Incline in their names will typically be labeled 'oblique' in the font database. A font that is labeled 'oblique' in the UA's font database may actually have been generated by electronically slanting a normal font.</summary>
        </member>
        <member name="F:Svg.SvgFontStyle.Italic">
            <summary>Specifies a font that is classified as 'italic' in the UA's font database, or, if that is not available, one labeled 'oblique'. Fonts with Italic, Cursive, or Kursiv in their names will typically be labeled 'italic'</summary>
        </member>
        <member name="T:Svg.SvgOrient">
            <summary>
            Represents an orientation in an Scalable Vector Graphics document.
            </summary>
        </member>
        <member name="P:Svg.SvgOrient.Angle">
            <summary>
            Gets the value of the unit.
            </summary>
        </member>
        <member name="P:Svg.SvgOrient.IsAuto">
            <summary>
            Gets the value of the unit.
            </summary>
        </member>
        <member name="M:Svg.SvgOrient.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Svg.SvgOrient.op_Implicit(System.Single)~Svg.SvgOrient">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Svg.SvgOrient"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Svg.ISvgViewPort">
            <summary>
            Provides properties and methods to be implemented by view port elements.
            </summary>
        </member>
        <member name="P:Svg.ISvgViewPort.ViewBox">
            <summary>
            Gets or sets the viewport of the element.
            </summary>
        </member>
        <member name="T:Svg.SvgAspectRatio">
            <summary>
            Description of SvgAspectRatio.
            </summary>
        </member>
        <member name="T:Svg.SvgCoordinateUnits">
            <summary>
            Defines the various coordinate units certain SVG elements may use.
            </summary>
        </member>
        <member name="F:Svg.SvgCoordinateUnits.ObjectBoundingBox">
            <summary>
            Indicates that the coordinate system of the owner element is to be used.
            </summary>
        </member>
        <member name="F:Svg.SvgCoordinateUnits.UserSpaceOnUse">
            <summary>
            Indicates that the coordinate system of the entire document is to be used.
            </summary>
        </member>
        <member name="T:Svg.SvgFontWeight">
            <summary>The weight of a face relative to others in the same font family.</summary>
        </member>
        <member name="F:Svg.SvgFontWeight.All">
            <summary>All font weights.</summary>
        </member>
        <member name="F:Svg.SvgFontWeight.Inherit">
            <summary>The value is inherited from the parent element.</summary>
        </member>
        <member name="F:Svg.SvgFontWeight.Normal">
            <summary>Same as <see cref="F:Svg.SvgFontWeight.W400"/>.</summary>
        </member>
        <member name="F:Svg.SvgFontWeight.Bold">
            <summary>Same as <see cref="F:Svg.SvgFontWeight.W700"/>.</summary>
        </member>
        <member name="F:Svg.SvgFontWeight.Bolder">
            <summary>One font weight darker than the parent element.</summary>
        </member>
        <member name="F:Svg.SvgFontWeight.Lighter">
            <summary>One font weight lighter than the parent element.</summary>
        </member>
        <member name="F:Svg.SvgFontWeight.W100">
            <summary></summary>
        </member>
        <member name="F:Svg.SvgFontWeight.W200">
            <summary></summary>
        </member>
        <member name="F:Svg.SvgFontWeight.W300">
            <summary></summary>
        </member>
        <member name="F:Svg.SvgFontWeight.W400">
            <summary>Same as <see cref="F:Svg.SvgFontWeight.Normal"/>.</summary>
        </member>
        <member name="F:Svg.SvgFontWeight.W500">
            <summary></summary>
        </member>
        <member name="F:Svg.SvgFontWeight.W600">
            <summary></summary>
        </member>
        <member name="F:Svg.SvgFontWeight.W700">
            <summary>Same as <see cref="F:Svg.SvgFontWeight.Bold"/>.</summary>
        </member>
        <member name="F:Svg.SvgFontWeight.W800">
            <summary></summary>
        </member>
        <member name="F:Svg.SvgFontWeight.W900">
            <summary></summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Svg.SvgOverflow" -->
        <member name="F:Svg.SvgOverflow.Inherit">
            <summary>The value is inherited from the parent element.</summary>
        </member>
        <member name="F:Svg.SvgOverflow.Auto">
            <summary>The overflow is rendered - same as "visible".</summary>
        </member>
        <member name="F:Svg.SvgOverflow.Visible">
            <summary>Overflow is rendered.</summary>
        </member>
        <member name="F:Svg.SvgOverflow.Hidden">
            <summary>Overflow is not rendered.</summary>
        </member>
        <member name="F:Svg.SvgOverflow.Scroll">
            <summary>Overflow causes a scrollbar to appear (horizontal, vertical or both).</summary>
        </member>
        <member name="T:Svg.SvgUnitCollection">
            <summary>
            Represents a list of <see cref="!:SvgUnits"/>.
            </summary>
        </member>
        <member name="T:Svg.SvgUnitCollectionConverter">
            <summary>
            A class to convert string into <see cref="T:Svg.SvgUnitCollection"/> instances.
            </summary>
        </member>
        <member name="M:Svg.SvgUnitCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Svg.SvgViewBox">
            <summary>
            It is often desirable to specify that a given set of graphics stretch to fit a particular container element. The viewBox attribute provides this capability.
            </summary>
        </member>
        <member name="P:Svg.SvgViewBox.MinX">
            <summary>
            Gets or sets the position where the viewport starts horizontally.
            </summary>
        </member>
        <member name="P:Svg.SvgViewBox.MinY">
            <summary>
            Gets or sets the position where the viewport starts vertically.
            </summary>
        </member>
        <member name="P:Svg.SvgViewBox.Width">
            <summary>
            Gets or sets the width of the viewport.
            </summary>
        </member>
        <member name="P:Svg.SvgViewBox.Height">
            <summary>
            Gets or sets the height of the viewport.
            </summary>
        </member>
        <member name="M:Svg.SvgViewBox.op_Implicit(Svg.SvgViewBox)~System.Drawing.RectangleF">
            <summary>
            Performs an implicit conversion from <see cref="T:Svg.SvgViewBox"/> to <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Svg.SvgViewBox.op_Implicit(System.Drawing.RectangleF)~Svg.SvgViewBox">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.RectangleF"/> to <see cref="T:Svg.SvgViewBox"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Svg.SvgViewBox.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgViewBox"/> struct.
            </summary>
            <param name="minX">The min X.</param>
            <param name="minY">The min Y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Svg.SvgViewBoxConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Svg.SvgSwitch">
            <summary>
            The ‘switch’ element evaluates the ‘requiredFeatures’, ‘requiredExtensions’ and ‘systemLanguage’ attributes on its direct child elements in order, and then processes and renders the first child for which these attributes evaluate to true
            </summary>
        </member>
        <member name="M:Svg.SvgSwitch.Path(Svg.ISvgRenderer)">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="P:Svg.SvgSwitch.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Svg.SvgSwitch.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="renderer">The <see cref="T:System.Drawing.Graphics"/> object to render to.</param>
        </member>
        <member name="T:Svg.SvgDocumentMetadata">
            <summary>
            Represents a list of re-usable SVG components.
            </summary>
        </member>
        <member name="M:Svg.SvgDocumentMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgDocumentMetadata"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgDocumentMetadata.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:Svg.ISvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="T:Svg.SvgForeignObject">
            <summary>
            The ‘foreignObject’ element allows for inclusion of a foreign namespace which has its graphical content drawn by a different user agent
            </summary>
        </member>
        <member name="M:Svg.SvgForeignObject.Path(Svg.ISvgRenderer)">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="P:Svg.SvgForeignObject.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="T:Svg.SvgDeferredPaintServer">
            <summary>
            A wrapper for a paint server which isn't defined currently in the parse process, but
            should be defined by the time the image needs to render.
            </summary>
        </member>
        <member name="M:Svg.SvgMarker.RenderMarker(Svg.ISvgRenderer,Svg.SvgVisualElement,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Render this marker using the slope of the given line segment
            </summary>
            <param name="pRenderer"></param>
            <param name="pOwner"></param>
            <param name="pMarkerPoint1"></param>
            <param name="pMarkerPoint2"></param>
        </member>
        <member name="M:Svg.SvgMarker.RenderMarker(Svg.ISvgRenderer,Svg.SvgVisualElement,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Render this marker using the average of the slopes of the two given line segments
            </summary>
            <param name="pRenderer"></param>
            <param name="pOwner"></param>
            <param name="pMarkerPoint1"></param>
            <param name="pMarkerPoint2"></param>
            <param name="pMarkerPoint3"></param>
        </member>
        <member name="M:Svg.SvgMarker.RenderPart2(System.Single,Svg.ISvgRenderer,Svg.SvgVisualElement,System.Drawing.PointF)">
            <summary>
            Common code for rendering a marker once the orientation angle has been calculated
            </summary>
            <param name="fAngle"></param>
            <param name="pRenderer"></param>
            <param name="pOwner"></param>
            <param name="pMarkerPoint"></param>
        </member>
        <member name="M:Svg.SvgMarker.CreatePen(Svg.SvgVisualElement,Svg.ISvgRenderer)">
            <summary>
            Create a pen that can be used to render this marker
            </summary>
            <param name="pStroke"></param>
            <returns></returns>
        </member>
        <member name="M:Svg.SvgMarker.GetClone(Svg.SvgVisualElement)">
            <summary>
            Get a clone of the current path, scaled for the stroke width
            </summary>
            <returns></returns>
        </member>
        <member name="M:Svg.SvgMarker.AdjustForViewBoxWidth(System.Single)">
            <summary>
            Adjust the given value to account for the width of the viewbox in the viewport
            </summary>
            <param name="fWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Svg.SvgMarker.AdjustForViewBoxHeight(System.Single)">
            <summary>
            Adjust the given value to account for the height of the viewbox in the viewport
            </summary>
            <param name="fWidth"></param>
            <returns></returns>
        </member>
        <member name="T:Svg.SvgDefinitionList">
            <summary>
            Represents a list of re-usable SVG components.
            </summary>
        </member>
        <member name="M:Svg.SvgDefinitionList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgDefinitionList"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgDefinitionList.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:Svg.ISvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="T:Svg.SvgFragment">
            <summary>
            An <see cref="T:Svg.SvgFragment"/> represents an SVG fragment that can be the root element or an embedded fragment of an SVG document.
            </summary>
        </member>
        <member name="F:Svg.SvgFragment.Namespace">
            <summary>
            Gets the SVG namespace string.
            </summary>
        </member>
        <member name="P:Svg.SvgFragment.X">
            <summary>
            Gets or sets the position where the left point of the svg should start.
            </summary>
        </member>
        <member name="P:Svg.SvgFragment.Y">
            <summary>
            Gets or sets the position where the top point of the svg should start.
            </summary>
        </member>
        <member name="P:Svg.SvgFragment.Width">
            <summary>
            Gets or sets the width of the fragment.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Svg.SvgFragment.Height">
            <summary>
            Gets or sets the height of the fragment.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Svg.SvgFragment.ViewBox">
            <summary>
            Gets or sets the viewport of the element.
            </summary>
            <value></value>
        </member>
        <member name="P:Svg.SvgFragment.AspectRatio">
            <summary>
            Gets or sets the aspect of the viewport.
            </summary>
            <value></value>
        </member>
        <member name="P:Svg.SvgFragment.FontSize">
            <summary>
            Refers to the size of the font from baseline to baseline when multiple lines of text are set solid in a multiline layout environment.
            </summary>
        </member>
        <member name="P:Svg.SvgFragment.FontFamily">
            <summary>
            Indicates which font family is to be used to render the text.
            </summary>
        </member>
        <member name="M:Svg.SvgFragment.PushTransforms(Svg.ISvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to be transformed.</param>
        </member>
        <member name="P:Svg.SvgFragment.Path">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="P:Svg.SvgFragment.Bounds">
            <summary>
            Gets the bounds of the svg element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Svg.SvgFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgFragment"/> class.
            </summary>
        </member>
        <member name="T:Svg.SvgGroup">
            <summary>
            An element used to group SVG shapes.
            </summary>
        </member>
        <member name="M:Svg.SvgGroup.Path(Svg.ISvgRenderer)">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="P:Svg.SvgGroup.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Svg.SvgUse.PushTransforms(Svg.ISvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:Svg.SvgUse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgUse"/> class.
            </summary>
        </member>
        <member name="P:Svg.EnumBaseConverter`1.DefaultValue">
            <summary>If specified, upon conversion, the default value will result in 'null'.</summary>
        </member>
        <member name="M:Svg.EnumBaseConverter`1.#ctor">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:Svg.EnumBaseConverter`1.#ctor(`0)">
            <summary>Creates a new instance.</summary>
            <param name="defaultValue">Specified the default value of the enum.</param>
        </member>
        <member name="M:Svg.EnumBaseConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Attempts to convert the provided value to <typeparamref name="T"/>.</summary>
        </member>
        <member name="M:Svg.EnumBaseConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Attempts to convert the value to the destination type.</summary>
        </member>
        <member name="M:Svg.SvgContentNode.DeepCopy">
            <summary>
            Create a deep copy of this <see cref="T:Svg.ISvgNode"/>.
            </summary>
            <returns>A deep copy of this <see cref="T:Svg.ISvgNode"/></returns>
        </member>
        <member name="T:Svg.SvgDefaults">
            <summary>
            Holds a dictionary of the default values of the SVG specification 
            </summary>
        </member>
        <member name="M:Svg.SvgDefaults.IsDefault(System.String,System.String)">
            <summary>
            Checks whether the property value is the default value of the svg definition.
            </summary>
            <param name="attributeName">Name of the svg attribute</param>
            <param name="propertyValue">.NET value of the attribute</param>
        </member>
        <member name="T:Svg.SvgElementAttribute">
            <summary>
            Specifies the SVG name of an <see cref="T:Svg.SvgElement"/>.
            </summary>
        </member>
        <member name="P:Svg.SvgElementAttribute.ElementName">
            <summary>
            Gets the name of the SVG element.
            </summary>
        </member>
        <member name="M:Svg.SvgElementAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgElementAttribute"/> class with the specified element name;
            </summary>
            <param name="elementName">The name of the SVG element.</param>
        </member>
        <member name="T:Svg.SvgExtentions">
            <summary>
            Svg helpers
            </summary>
        </member>
        <member name="T:Svg.SvgRenderer">
            <summary>
            Convenience wrapper around a graphics object
            </summary>
        </member>
        <member name="M:Svg.SvgRenderer.#ctor(System.Drawing.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.ISvgRenderer"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgRenderer.FromImage(System.Drawing.Image)">
            <summary>
            Creates a new <see cref="T:Svg.ISvgRenderer"/> from the specified <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="image"><see cref="T:System.Drawing.Image"/> from which to create the new <see cref="T:Svg.ISvgRenderer"/>.</param>
        </member>
        <member name="M:Svg.SvgRenderer.FromGraphics(System.Drawing.Graphics)">
            <summary>
            Creates a new <see cref="T:Svg.ISvgRenderer"/> from the specified <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to create the renderer from.</param>
        </member>
        <member name="T:Svg.SvgColourConverter">
            <summary>
            Converts string representations of colours into <see cref="T:System.Drawing.Color"/> objects.
            </summary>
        </member>
        <member name="M:Svg.SvgColourConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the converter's native type.
            </summary>
            <param name="context">A <see cref="T:System.ComponentModel.TypeDescriptor"/> that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> that specifies the culture to represent the color.</param>
            <param name="value">The object to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the converted value.
            </returns>
            <exception cref="T:System.ArgumentException">The conversion cannot be performed.</exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
            </PermissionSet>
        </member>
        <member name="M:Svg.SvgColourConverter.Hsl2Rgb(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL color (with HSL specified from 0 to 1) to RGB color.
            Taken from http://www.geekymonkey.com/Programming/CSharp/RGB2HSL_HSL2RGB.htm
            </summary>
            <param name="h"></param>
            <param name="sl"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="T:Svg.SvgGradientSpreadMethod">
            <summary>Indicates what happens if the gradient starts or ends inside the bounds of the target rectangle.</summary>
            <remarks>
                <para>Possible values are: 'pad', which says to use the terminal colors of the gradient to fill the remainder of the target region, 'reflect', which says to reflect the gradient pattern start-to-end, end-to-start, start-to-end, etc. continuously until the target rectangle is filled, and repeat, which says to repeat the gradient pattern start-to-end, start-to-end, start-to-end, etc. continuously until the target region is filled.</para>
                <para>If the attribute is not specified, the effect is as if a value of 'pad' were specified.</para>
            </remarks>
        </member>
        <member name="F:Svg.SvgGradientSpreadMethod.Pad">
            <summary>Use the terminal colors of the gradient to fill the remainder of the target region.</summary>
        </member>
        <member name="F:Svg.SvgGradientSpreadMethod.Reflect">
            <summary>Reflect the gradient pattern start-to-end, end-to-start, start-to-end, etc. continuously until the target rectangle is filled.</summary>
        </member>
        <member name="F:Svg.SvgGradientSpreadMethod.Repeat">
            <summary>Repeat the gradient pattern start-to-end, start-to-end, start-to-end, etc. continuously until the target region is filled.</summary>
        </member>
        <member name="M:Svg.SvgDtdResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Maps a URI to an object containing the actual resource.
            </summary>
            <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)"/></param>
            <param name="role">The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.</param>
            <param name="ofObjectToReturn">The type of object to return. The current implementation only returns System.IO.Stream objects.</param>
            <returns>
            A System.IO.Stream object or null if a type other than stream is specified.
            </returns>
            <exception cref="T:System.Xml.XmlException">
            	<paramref name="ofObjectToReturn"/> is neither null nor a Stream type. </exception>
            <exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="absoluteUri"/> is null. </exception>
            <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
        </member>
        <member name="T:Svg.SvgGradientServer">
            <summary>
            Provides the base class for all paint servers that wish to render a gradient.
            </summary>
        </member>
        <member name="M:Svg.SvgGradientServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgGradientServer"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgGradientServer.AddElement(Svg.SvgElement,System.Int32)">
            <summary>
            Called by the underlying <see cref="T:Svg.SvgElement"/> when an element has been added to the
            <see cref="!:Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:Svg.SvgElement"/> that has been added.</param>
            <param name="index">An <see cref="T:System.Int32"/> representing the index where the element was added to the collection.</param>
        </member>
        <member name="M:Svg.SvgGradientServer.RemoveElement(Svg.SvgElement)">
            <summary>
            Called by the underlying <see cref="T:Svg.SvgElement"/> when an element has been removed from the
            <see cref="!:Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:Svg.SvgElement"/> that has been removed.</param>
        </member>
        <member name="P:Svg.SvgGradientServer.Stops">
            <summary>
            Gets the ramp of colors to use on a gradient.
            </summary>
        </member>
        <member name="P:Svg.SvgGradientServer.SpreadMethod">
            <summary>
            Specifies what happens if the gradient starts or ends inside the bounds of the target rectangle.
            </summary>
        </member>
        <member name="P:Svg.SvgGradientServer.GradientUnits">
            <summary>
            Gets or sets the coordinate system of the gradient.
            </summary>
        </member>
        <member name="P:Svg.SvgGradientServer.InheritGradient">
            <summary>
            Gets or sets another gradient fill from which to inherit the stops from.
            </summary>
        </member>
        <member name="M:Svg.SvgGradientServer.GetColorBlend(Svg.ISvgRenderer,System.Single,System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> representing the <see cref="T:Svg.SvgGradientServer"/>'s gradient stops.
            </summary>
            <param name="owner">The parent <see cref="T:Svg.SvgVisualElement"/>.</param>
            <param name="opacity">The opacity of the colour blend.</param>
        </member>
        <member name="T:Svg.SvgGradientStop">
            <summary>
            Represents a colour stop in a gradient.
            </summary>
        </member>
        <member name="P:Svg.SvgGradientStop.Offset">
            <summary>
            Gets or sets the offset, i.e. where the stop begins from the beginning, of the gradient stop.
            </summary>
        </member>
        <member name="P:Svg.SvgGradientStop.StopColor">
            <summary>
            Gets or sets the colour of the gradient stop.
            </summary>
        </member>
        <member name="P:Svg.SvgGradientStop.Opacity">
            <summary>
            Gets or sets the opacity of the gradient stop (0-1).
            </summary>
        </member>
        <member name="M:Svg.SvgGradientStop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgGradientStop"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgGradientStop.#ctor(Svg.SvgUnit,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgGradientStop"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="colour">The colour.</param>
        </member>
        <member name="T:Svg.ISvgStylable">
            <summary>
            Defines the methods and properties required for an SVG element to be styled.
            </summary>
        </member>
        <member name="F:Svg.SvgColourServer.NotSet">
            <summary>
            An unspecified <see cref="T:Svg.SvgPaintServer"/>.
            </summary>
        </member>
        <member name="F:Svg.SvgColourServer.Inherit">
            <summary>
            A <see cref="T:Svg.SvgPaintServer"/> that should inherit from its parent.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Svg.SvgLinearGradientServer.LineF.Intersection(Svg.SvgLinearGradientServer.LineF)" -->
        <member name="T:Svg.SvgPaintServer">
            <summary>
            Represents the base class for all paint servers that are intended to be used as a fill or stroke.
            </summary>
        </member>
        <member name="F:Svg.SvgPaintServer.None">
            <summary>
            An unspecified <see cref="T:Svg.SvgPaintServer"/>.
            </summary>
        </member>
        <member name="M:Svg.SvgPaintServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgPaintServer"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgPaintServer.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:Svg.ISvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Svg.SvgPaintServer.GetBrush(Svg.SvgVisualElement,Svg.ISvgRenderer,System.Single,System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Drawing.Brush"/> representing the current paint server.
            </summary>
            <param name="styleOwner">The owner <see cref="T:Svg.SvgVisualElement"/>.</param>
            <param name="opacity">The opacity of the brush.</param>
        </member>
        <member name="M:Svg.SvgPaintServer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Svg.SvgPatternServer">
            <summary>
            A pattern is used to fill or stroke an object using a pre-defined graphic object which can be replicated ("tiled") at fixed intervals in x and y to cover the areas to be painted.
            </summary>
        </member>
        <member name="P:Svg.SvgPatternServer.ViewBox">
            <summary>
            Specifies a supplemental transformation which is applied on top of any 
            transformations necessary to create a new pattern coordinate system.
            </summary>
        </member>
        <member name="P:Svg.SvgPatternServer.AspectRatio">
            <summary>
            Gets or sets the aspect of the viewport.
            </summary>
            <value></value>
        </member>
        <member name="P:Svg.SvgPatternServer.Width">
            <summary>
            Gets or sets the width of the pattern.
            </summary>
        </member>
        <member name="P:Svg.SvgPatternServer.PatternUnits">
            <summary>
            Gets or sets the width of the pattern.
            </summary>
        </member>
        <member name="P:Svg.SvgPatternServer.PatternContentUnits">
            <summary>
            Gets or sets the width of the pattern.
            </summary>
        </member>
        <member name="P:Svg.SvgPatternServer.Height">
            <summary>
            Gets or sets the height of the pattern.
            </summary>
        </member>
        <member name="P:Svg.SvgPatternServer.X">
            <summary>
            Gets or sets the X-axis location of the pattern.
            </summary>
        </member>
        <member name="P:Svg.SvgPatternServer.Y">
            <summary>
            Gets or sets the Y-axis location of the pattern.
            </summary>
        </member>
        <member name="P:Svg.SvgPatternServer.InheritGradient">
            <summary>
            Gets or sets another gradient fill from which to inherit the stops from.
            </summary>
        </member>
        <member name="M:Svg.SvgPatternServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgPatternServer"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgPatternServer.GetBrush(Svg.SvgVisualElement,Svg.ISvgRenderer,System.Single,System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Drawing.Brush"/> representing the current paint server.
            </summary>
            <param name="renderingElement">The owner <see cref="T:Svg.SvgVisualElement"/>.</param>
            <param name="opacity">The opacity of the brush.</param>
        </member>
        <member name="M:Svg.SvgRadialGradientServer.CalcScale(System.Drawing.RectangleF,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Graphics)">
            <summary>
            Determine how much (approximately) the path must be scaled to contain the rectangle
            </summary>
            <param name="bounds">Bounds that the path must contain</param>
            <param name="path">Path of the gradient</param>
            <returns>Scale factor</returns>
            <remarks>
            This method continually transforms the rectangle (fewer points) until it is contained by the path
            and returns the result of the search.  The scale factor is set to a constant 95%
            </remarks>
        </member>
        <member name="T:Svg.SvgStrokeLineCap">
            <summary>Specifies the shape to be used at the end of open subpaths when they are stroked.</summary>
        </member>
        <member name="F:Svg.SvgStrokeLineCap.Inherit">
            <summary>The value is inherited from the parent element.</summary>
        </member>
        <member name="F:Svg.SvgStrokeLineCap.Butt">
            <summary>The ends of the subpaths are square but do not extend past the end of the subpath.</summary>
        </member>
        <member name="F:Svg.SvgStrokeLineCap.Round">
            <summary>The ends of the subpaths are rounded.</summary>
        </member>
        <member name="F:Svg.SvgStrokeLineCap.Square">
            <summary>The ends of the subpaths are square.</summary>
        </member>
        <member name="T:Svg.SvgStrokeLineJoin">
            <summary>Specifies the shape to be used at the corners of paths or basic shapes when they are stroked.</summary>
        </member>
        <member name="F:Svg.SvgStrokeLineJoin.Inherit">
            <summary>The value is inherited from the parent element.</summary>
        </member>
        <member name="F:Svg.SvgStrokeLineJoin.Miter">
            <summary>The corners of the paths are joined sharply.</summary>
        </member>
        <member name="F:Svg.SvgStrokeLineJoin.Round">
            <summary>The corners of the paths are rounded off.</summary>
        </member>
        <member name="F:Svg.SvgStrokeLineJoin.Bevel">
            <summary>The corners of the paths are "flattened".</summary>
        </member>
        <member name="T:Svg.SvgPath">
            <summary>
            Represents an SVG path element.
            </summary>
        </member>
        <member name="P:Svg.SvgPath.PathData">
            <summary>
            Gets or sets a <see cref="T:Svg.Pathing.SvgPathSegmentList"/> of path data.
            </summary>
        </member>
        <member name="P:Svg.SvgPath.PathLength">
            <summary>
            Gets or sets the length of the path.
            </summary>
        </member>
        <member name="P:Svg.SvgPath.MarkerEnd">
            <summary>
            Gets or sets the marker (end cap) of the path.
            </summary>
        </member>
        <member name="P:Svg.SvgPath.MarkerMid">
            <summary>
            Gets or sets the marker (start cap) of the path.
            </summary>
        </member>
        <member name="P:Svg.SvgPath.MarkerStart">
            <summary>
            Gets or sets the marker (start cap) of the path.
            </summary>
        </member>
        <member name="M:Svg.SvgPath.Path(Svg.ISvgRenderer)">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
        </member>
        <member name="P:Svg.SvgPath.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Svg.SvgPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgPath"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgPath.RenderStroke(Svg.ISvgRenderer)">
            <summary>
            Renders the stroke of the <see cref="T:Svg.SvgVisualElement"/> to the specified <see cref="T:Svg.ISvgRenderer"/>
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
        </member>
        <member name="T:Svg.SvgRectangle">
            <summary>
            Represents an SVG rectangle that could also have rounded edges.
            </summary>
        </member>
        <member name="M:Svg.SvgRectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgRectangle"/> class.
            </summary>
        </member>
        <member name="P:Svg.SvgRectangle.Location">
            <summary>
            Gets an <see cref="T:Svg.SvgPoint"/> representing the top left point of the rectangle.
            </summary>
        </member>
        <member name="P:Svg.SvgRectangle.X">
            <summary>
            Gets or sets the position where the left point of the rectangle should start.
            </summary>
        </member>
        <member name="P:Svg.SvgRectangle.Y">
            <summary>
            Gets or sets the position where the top point of the rectangle should start.
            </summary>
        </member>
        <member name="P:Svg.SvgRectangle.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:Svg.SvgRectangle.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="P:Svg.SvgRectangle.CornerRadiusX">
            <summary>
            Gets or sets the X-radius of the rounded edges of this rectangle.
            </summary>
        </member>
        <member name="P:Svg.SvgRectangle.CornerRadiusY">
            <summary>
            Gets or sets the Y-radius of the rounded edges of this rectangle.
            </summary>
        </member>
        <member name="P:Svg.SvgRectangle.RequiresSmoothRendering">
            <summary>
            Gets or sets a value to determine if anti-aliasing should occur when the element is being rendered.
            </summary>
        </member>
        <member name="P:Svg.SvgRectangle.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Svg.SvgRectangle.Path(Svg.ISvgRenderer)">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
        </member>
        <member name="M:Svg.SvgRectangle.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
        </member>
        <member name="T:Svg.SvgDocument">
            <summary>
            The class used to create and load SVG documents.
            </summary>
        </member>
        <member name="M:Svg.SvgDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgDocument"/> class.
            </summary>
        </member>
        <member name="P:Svg.SvgDocument.IdManager">
            <summary>
            Gets an <see cref="T:Svg.SvgElementIdManager"/> for this document.
            </summary>
        </member>
        <member name="M:Svg.SvgDocument.OverwriteIdManager(Svg.SvgElementIdManager)">
            <summary>
            Overwrites the current IdManager with a custom implementation. 
            Be careful with this: If elements have been inserted into the document before,
            you have to take care that the new IdManager also knows of them.
            </summary>
            <param name="manager"></param>
        </member>
        <member name="P:Svg.SvgDocument.Ppi">
            <summary>
            Gets or sets the Pixels Per Inch of the rendered image.
            </summary>
        </member>
        <member name="P:Svg.SvgDocument.ExternalCSSHref">
            <summary>
            Gets or sets an external Cascading Style Sheet (CSS)
            </summary>
        </member>
        <member name="M:Svg.SvgDocument.GetElementById(System.String)">
            <summary>
            Retrieves the <see cref="T:Svg.SvgElement"/> with the specified ID.
            </summary>
            <param name="id">A <see cref="T:System.String"/> containing the ID of the element to find.</param>
            <returns>An <see cref="T:Svg.SvgElement"/> of one exists with the specified ID; otherwise false.</returns>
        </member>
        <member name="M:Svg.SvgDocument.GetElementById``1(System.String)">
            <summary>
            Retrieves the <see cref="T:Svg.SvgElement"/> with the specified ID.
            </summary>
            <param name="id">A <see cref="T:System.String"/> containing the ID of the element to find.</param>
            <returns>An <see cref="T:Svg.SvgElement"/> of one exists with the specified ID; otherwise false.</returns>
        </member>
        <member name="M:Svg.SvgDocument.Open(System.String)">
            <summary>
            Opens the document at the specified path and loads the SVG contents.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the file to open.</param>
            <returns>An <see cref="T:Svg.SvgDocument"/> with the contents loaded.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The document at the specified <paramref name="path"/> cannot be found.</exception>
        </member>
        <member name="M:Svg.SvgDocument.Open``1(System.String)">
            <summary>
            Opens the document at the specified path and loads the SVG contents.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the file to open.</param>
            <returns>An <see cref="T:Svg.SvgDocument"/> with the contents loaded.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The document at the specified <paramref name="path"/> cannot be found.</exception>
        </member>
        <member name="M:Svg.SvgDocument.Open``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Opens the document at the specified path and loads the SVG contents.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the file to open.</param>
            <param name="entities">A dictionary of custom entity definitions to be used when resolving XML entities within the document.</param>
            <returns>An <see cref="T:Svg.SvgDocument"/> with the contents loaded.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The document at the specified <paramref name="path"/> cannot be found.</exception>
        </member>
        <member name="M:Svg.SvgDocument.Open``1(System.IO.Stream)">
            <summary>
            Attempts to open an SVG document from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the SVG document to open.</param>
        </member>
        <member name="M:Svg.SvgDocument.FromSvg``1(System.String)">
            <summary>
            Attempts to create an SVG document from the specified string data.
            </summary>
            <param name="svg">The SVG data.</param>
        </member>
        <member name="M:Svg.SvgDocument.Open``1(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Opens an SVG document from the specified <see cref="T:System.IO.Stream"/> and adds the specified entities.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the SVG document to open.</param>
            <param name="entities">Custom entity definitions.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stream"/> parameter cannot be <c>null</c>.</exception>
        </member>
        <member name="M:Svg.SvgDocument.Open(System.Xml.XmlDocument)">
            <summary>
            Opens an SVG document from the specified <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/> containing the SVG document XML.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="document"/> parameter cannot be <c>null</c>.</exception>
        </member>
        <member name="M:Svg.SvgDocument.Draw(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgDocument"/> to the specified <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to render the document with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="renderer"/> parameter cannot be <c>null</c>.</exception>
        </member>
        <member name="M:Svg.SvgDocument.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the <see cref="T:Svg.SvgDocument"/> to the specified <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to be rendered to.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="graphics"/> parameter cannot be <c>null</c>.</exception>
        </member>
        <member name="M:Svg.SvgDocument.Draw">
            <summary>
            Renders the <see cref="T:Svg.SvgDocument"/> and returns the image as a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> containing the rendered document.</returns>
        </member>
        <member name="M:Svg.SvgDocument.Draw(System.Drawing.Bitmap)">
            <summary>
            Renders the <see cref="T:Svg.SvgDocument"/> into a given Bitmap <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
        </member>
        <member name="M:Svg.SvgDocument.Draw(System.Int32,System.Int32)">
            <summary>
            Renders the <see cref="T:Svg.SvgDocument"/> in given size and returns the image as a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> containing the rendered document.</returns>
        </member>
        <member name="M:Svg.SvgDocument.RasterizeDimensions(System.Drawing.SizeF@,System.Int32,System.Int32)">
            <summary>
            If both or one of raster height and width is not given (0), calculate that missing value from original SVG size
            while keeping original SVG size ratio
            </summary>
            <param name="size"></param>
            <param name="rasterWidth"></param>
            <param name="rasterHeight"></param>
        </member>
        <member name="T:Svg.SvgAttributeAttribute">
            <summary>
            Specifies the SVG attribute name of the associated property.
            </summary>
        </member>
        <member name="F:Svg.SvgAttributeAttribute.SvgNamespace">
            <summary>
            Gets a <see cref="T:System.String"/> containing the XLink namespace (http://www.w3.org/1999/xlink).
            </summary>
        </member>
        <member name="M:Svg.SvgAttributeAttribute.Match(System.Object)">
            <summary>
            When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.
            </summary>
            <param name="obj">An <see cref="T:System.Object"/> to compare with this instance of <see cref="T:System.Attribute"/>.</param>
            <returns>
            true if this instance equals <paramref name="obj"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:Svg.SvgAttributeAttribute.NamespaceAndName">
            <summary>
            Gets the name of the SVG attribute.
            </summary>
        </member>
        <member name="P:Svg.SvgAttributeAttribute.Name">
            <summary>
            Gets the name of the SVG attribute.
            </summary>
        </member>
        <member name="P:Svg.SvgAttributeAttribute.NameSpace">
            <summary>
            Gets the namespace of the SVG attribute.
            </summary>
        </member>
        <member name="M:Svg.SvgAttributeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgAttributeAttribute"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgAttributeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgAttributeAttribute"/> class with the specified attribute name.
            </summary>
            <param name="name">The name of the SVG attribute.</param>
        </member>
        <member name="M:Svg.SvgAttributeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgAttributeAttribute"/> class with the specified SVG attribute name and namespace.
            </summary>
            <param name="name">The name of the SVG attribute.</param>
            <param name="nameSpace">The namespace of the SVG attribute (e.g. http://www.w3.org/2000/svg).</param>
        </member>
        <member name="T:Svg.SvgAttributeCollection">
            <summary>
            A collection of Scalable Vector Attributes that can be inherited from the owner elements ancestors.
            </summary>
        </member>
        <member name="M:Svg.SvgAttributeCollection.#ctor(Svg.SvgElement)">
            <summary>
            Initialises a new instance of a <see cref="T:Svg.SvgAttributeCollection"/> with the given <see cref="T:Svg.SvgElement"/> as the owner.
            </summary>
            <param name="owner">The <see cref="T:Svg.SvgElement"/> owner of the collection.</param>
        </member>
        <member name="M:Svg.SvgAttributeCollection.GetAttribute``1(System.String)">
            <summary>
            Gets the attribute with the specified name.
            </summary>
            <typeparam name="TAttributeType">The type of the attribute value.</typeparam>
            <param name="attributeName">A <see cref="T:System.String"/> containing the name of the attribute.</param>
            <returns>The attribute value if available; otherwise the default value of <typeparamref name="TAttributeType"/>.</returns>
        </member>
        <member name="M:Svg.SvgAttributeCollection.GetAttribute``1(System.String,``0)">
            <summary>
            Gets the attribute with the specified name.
            </summary>
            <typeparam name="T">The type of the attribute value.</typeparam>
            <param name="attributeName">A <see cref="T:System.String"/> containing the name of the attribute.</param>
            <param name="defaultValue">The value to return if a value hasn't already been specified.</param>
            <returns>The attribute value if available; otherwise the default value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Svg.SvgAttributeCollection.GetInheritedAttribute``1(System.String)">
            <summary>
            Gets the attribute with the specified name and inherits from ancestors if there is no attribute set.
            </summary>
            <typeparam name="TAttributeType">The type of the attribute value.</typeparam>
            <param name="attributeName">A <see cref="T:System.String"/> containing the name of the attribute.</param>
            <returns>The attribute value if available; otherwise the ancestors value for the same attribute; otherwise the default value of <typeparamref name="TAttributeType"/>.</returns>
        </member>
        <member name="P:Svg.SvgAttributeCollection.Item(System.String)">
            <summary>
            Gets the attribute with the specified name.
            </summary>
            <param name="attributeName">A <see cref="T:System.String"/> containing the attribute name.</param>
            <returns>The attribute value associated with the specified name; If there is no attribute the parent's value will be inherited.</returns>
        </member>
        <member name="E:Svg.SvgAttributeCollection.AttributeChanged">
            <summary>
            Fired when an Atrribute has changed
            </summary>
        </member>
        <member name="T:Svg.SvgCustomAttributeCollection">
            <summary>
            A collection of Custom Attributes
            </summary>
        </member>
        <member name="M:Svg.SvgCustomAttributeCollection.#ctor(Svg.SvgElement)">
            <summary>
            Initialises a new instance of a <see cref="T:Svg.SvgAttributeCollection"/> with the given <see cref="T:Svg.SvgElement"/> as the owner.
            </summary>
            <param name="owner">The <see cref="T:Svg.SvgElement"/> owner of the collection.</param>
        </member>
        <member name="P:Svg.SvgCustomAttributeCollection.Item(System.String)">
            <summary>
            Gets the attribute with the specified name.
            </summary>
            <param name="attributeName">A <see cref="T:System.String"/> containing the attribute name.</param>
            <returns>The attribute value associated with the specified name; If there is no attribute the parent's value will be inherited.</returns>
        </member>
        <member name="E:Svg.SvgCustomAttributeCollection.AttributeChanged">
            <summary>
            Fired when an Atrribute has changed
            </summary>
        </member>
        <member name="T:Svg.AttributeEventArgs">
            <summary>
            Describes the Attribute which was set
            </summary>
        </member>
        <member name="T:Svg.ContentEventArgs">
            <summary>
            Content of this whas was set
            </summary>
        </member>
        <member name="T:Svg.ChildAddedEventArgs">
            <summary>
            Describes the Attribute which was set
            </summary>
        </member>
        <member name="T:Svg.MouseArg">
            <summary>
            Represents the state of the mouse at the moment the event occured.
            </summary>
        </member>
        <member name="F:Svg.MouseArg.Button">
            <summary>
            1 = left, 2 = middle, 3 = right
            </summary>
        </member>
        <member name="F:Svg.MouseArg.ClickCount">
            <summary>
            Amount of mouse clicks, e.g. 2 for double click
            </summary>
        </member>
        <member name="F:Svg.MouseArg.AltKey">
            <summary>
            Alt modifier key pressed
            </summary>
        </member>
        <member name="F:Svg.MouseArg.ShiftKey">
            <summary>
            Shift modifier key pressed
            </summary>
        </member>
        <member name="F:Svg.MouseArg.CtrlKey">
            <summary>
            Control modifier key pressed
            </summary>
        </member>
        <member name="T:Svg.StringArg">
            <summary>
            Represents a string argument
            </summary>
        </member>
        <member name="F:Svg.MouseScrollArg.AltKey">
            <summary>
            Alt modifier key pressed
            </summary>
        </member>
        <member name="F:Svg.MouseScrollArg.ShiftKey">
            <summary>
            Shift modifier key pressed
            </summary>
        </member>
        <member name="F:Svg.MouseScrollArg.CtrlKey">
            <summary>
            Control modifier key pressed
            </summary>
        </member>
        <member name="M:Svg.ISvgNode.DeepCopy">
            <summary>
            Create a deep copy of this <see cref="T:Svg.ISvgNode"/>.
            </summary>
            <returns>A deep copy of this <see cref="T:Svg.ISvgNode"/></returns>
        </member>
        <member name="T:Svg.ISvgDescriptiveElement">
            <summary>This interface mostly indicates that a node is not to be drawn when rendering the SVG.</summary>
        </member>
        <member name="T:Svg.SvgElementCollection">
            <summary>
            Represents a collection of <see cref="T:Svg.SvgElement"/>s.
            </summary>
        </member>
        <member name="M:Svg.SvgElementCollection.#ctor(Svg.SvgElement)">
            <summary>
            Initialises a new instance of an <see cref="T:Svg.SvgElementCollection"/> class.
            </summary>
            <param name="owner">The owner <see cref="T:Svg.SvgElement"/> of the collection.</param>
        </member>
        <member name="M:Svg.SvgElementCollection.IndexOf(Svg.SvgElement)">
            <summary>
            Returns the index of the specified <see cref="T:Svg.SvgElement"/> in the collection.
            </summary>
            <param name="item">The <see cref="T:Svg.SvgElement"/> to search for.</param>
            <returns>The index of the element if it is present; otherwise -1.</returns>
        </member>
        <member name="M:Svg.SvgElementCollection.Insert(System.Int32,Svg.SvgElement)">
            <summary>
            Inserts the given <see cref="T:Svg.SvgElement"/> to the collection at the specified index.
            </summary>
            <param name="index">The index that the <paramref name="item"/> should be added at.</param>
            <param name="item">The <see cref="T:Svg.SvgElement"/> to be added.</param>
        </member>
        <member name="M:Svg.SvgElementCollection.FindSvgElementsOf``1">
            <summary>
            expensive recursive search for nodes of type T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Svg.SvgElementCollection.FindSvgElementOf``1">
            <summary>
            expensive recursive search for first node of type T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Svg.SvgElementFactory">
            <summary>
            Provides the methods required in order to parse and create <see cref="T:Svg.SvgElement"/> instances from XML.
            </summary>
        </member>
        <member name="P:Svg.SvgElementFactory.AvailableElements">
            <summary>
            Gets a list of available types that can be used when creating an <see cref="T:Svg.SvgElement"/>.
            </summary>
        </member>
        <member name="M:Svg.SvgElementFactory.CreateDocument``1(System.Xml.XmlReader)">
            <summary>
            Creates an <see cref="T:Svg.SvgDocument"/> from the current node in the specified <see cref="T:System.Xml.XmlTextReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlTextReader"/> containing the node to parse into an <see cref="T:Svg.SvgDocument"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="reader"/> parameter cannot be <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The CreateDocument method can only be used to parse root &lt;svg&gt; elements.</exception>
        </member>
        <member name="M:Svg.SvgElementFactory.CreateElement(System.Xml.XmlReader,Svg.SvgDocument)">
            <summary>
            Creates an <see cref="T:Svg.SvgElement"/> from the current node in the specified <see cref="T:System.Xml.XmlTextReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlTextReader"/> containing the node to parse into a subclass of <see cref="T:Svg.SvgElement"/>.</param>
            <param name="document">The <see cref="T:Svg.SvgDocument"/> that the created element belongs to.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="reader"/> and <paramref name="document"/> parameters cannot be <c>null</c>.</exception>
        </member>
        <member name="T:Svg.SvgElementFactory.ElementInfo">
            <summary>
            Contains information about a type inheriting from <see cref="T:Svg.SvgElement"/>.
            </summary>
        </member>
        <member name="P:Svg.SvgElementFactory.ElementInfo.ElementName">
            <summary>
            Gets the SVG name of the <see cref="T:Svg.SvgElement"/>.
            </summary>
        </member>
        <member name="P:Svg.SvgElementFactory.ElementInfo.ElementType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:Svg.SvgElement"/> subclass.
            </summary>
        </member>
        <member name="M:Svg.SvgElementFactory.ElementInfo.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgElementFactory.ElementInfo"/> struct.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementType">Type of the element.</param>
        </member>
        <member name="M:Svg.SvgElementFactory.ElementInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgElementFactory.ElementInfo"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgPathBuilder.Parse(System.String)">
            <summary>
            Parses the specified string into a collection of path segments.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing path data.</param>
        </member>
        <member name="M:Svg.SvgPathBuilder.ToAbsolute(System.Single,System.Single,Svg.Pathing.SvgPathSegmentList,System.Boolean)">
            <summary>
            Creates point with absolute coorindates.
            </summary>
            <param name="x">Raw X-coordinate value.</param>
            <param name="y">Raw Y-coordinate value.</param>
            <param name="segments">Current path segments.</param>
            <param name="isRelativeBoth"><b>true</b> if <paramref name="x"/> and <paramref name="y"/> contains relative coordinate values, otherwise <b>false</b>.</param>
            <returns><see cref="T:System.Drawing.PointF"/> that contains absolute coordinates.</returns>
        </member>
        <member name="M:Svg.SvgPathBuilder.ToAbsolute(System.Single,System.Single,Svg.Pathing.SvgPathSegmentList,System.Boolean,System.Boolean)">
            <summary>
            Creates point with absolute coorindates.
            </summary>
            <param name="x">Raw X-coordinate value.</param>
            <param name="y">Raw Y-coordinate value.</param>
            <param name="segments">Current path segments.</param>
            <param name="isRelativeX"><b>true</b> if <paramref name="x"/> contains relative coordinate value, otherwise <b>false</b>.</param>
            <param name="isRelativeY"><b>true</b> if <paramref name="y"/> contains relative coordinate value, otherwise <b>false</b>.</param>
            <returns><see cref="T:System.Drawing.PointF"/> that contains absolute coordinates.</returns>
        </member>
        <member name="T:Svg.SvgElementIdManager">
            <summary>
            Provides methods to ensure element ID's are valid and unique.
            </summary>
        </member>
        <member name="M:Svg.SvgElementIdManager.GetElementById(System.String)">
            <summary>
            Retrieves the <see cref="T:Svg.SvgElement"/> with the specified ID.
            </summary>
            <param name="id">A <see cref="T:System.String"/> containing the ID of the element to find.</param>
            <returns>An <see cref="T:Svg.SvgElement"/> of one exists with the specified ID; otherwise false.</returns>
        </member>
        <member name="M:Svg.SvgElementIdManager.Add(Svg.SvgElement)">
            <summary>
            Adds the specified <see cref="T:Svg.SvgElement"/> for ID management.
            </summary>
            <param name="element">The <see cref="T:Svg.SvgElement"/> to be managed.</param>
        </member>
        <member name="M:Svg.SvgElementIdManager.AddAndForceUniqueID(Svg.SvgElement,Svg.SvgElement,System.Boolean,System.Action{Svg.SvgElement,System.String,System.String})">
            <summary>
            Adds the specified <see cref="T:Svg.SvgElement"/> for ID management. 
            And can auto fix the ID if it already exists or it starts with a number.
            </summary>
            <param name="element">The <see cref="T:Svg.SvgElement"/> to be managed.</param>
            <param name="autoForceUniqueID">Pass true here, if you want the ID to be fixed</param>
            <param name="logElementOldIDNewID">If not null, the action is called before the id is fixed</param>
            <returns>true, if ID was altered</returns>
        </member>
        <member name="M:Svg.SvgElementIdManager.Remove(Svg.SvgElement)">
            <summary>
            Removed the specified <see cref="T:Svg.SvgElement"/> from ID management.
            </summary>
            <param name="element">The <see cref="T:Svg.SvgElement"/> to be removed from ID management.</param>
        </member>
        <member name="M:Svg.SvgElementIdManager.EnsureValidId(System.String,System.Boolean)">
            <summary>
            Ensures that the specified ID is valid within the containing <see cref="T:Svg.SvgDocument"/>.
            </summary>
            <param name="id">A <see cref="T:System.String"/> containing the ID to validate.</param>
            <param name="autoForceUniqueID">Creates a new unique id <see cref="T:System.String"/>.</param>
            <exception cref="T:Svg.SvgException">
            <para>The ID cannot start with a digit.</para>
            <para>An element with the same ID already exists within the containing <see cref="T:Svg.SvgDocument"/>.</para>
            </exception>
        </member>
        <member name="M:Svg.SvgElementIdManager.#ctor(Svg.SvgDocument)">
            <summary>
            Initialises a new instance of an <see cref="T:Svg.SvgElementIdManager"/>.
            </summary>
            <param name="document">The <see cref="T:Svg.SvgDocument"/> containing the <see cref="T:Svg.SvgElement"/>s to manage.</param>
        </member>
        <member name="T:Svg.SvgUnit">
            <summary>
            Represents a unit in an Scalable Vector Graphics document.
            </summary>
        </member>
        <member name="F:Svg.SvgUnit.Empty">
            <summary>
            Gets and empty <see cref="T:Svg.SvgUnit"/>.
            </summary>
        </member>
        <member name="F:Svg.SvgUnit.None">
            <summary>
            Gets an <see cref="T:Svg.SvgUnit"/> with a value of none.
            </summary>
        </member>
        <member name="P:Svg.SvgUnit.IsEmpty">
            <summary>
            Gets a value to determine whether the unit is empty.
            </summary>
        </member>
        <member name="P:Svg.SvgUnit.IsNone">
            <summary>
            Gets whether this unit is none.
            </summary>
        </member>
        <member name="P:Svg.SvgUnit.Value">
            <summary>
            Gets the value of the unit.
            </summary>
        </member>
        <member name="P:Svg.SvgUnit.Type">
            <summary>
            Gets the <see cref="T:Svg.SvgUnitType"/> of unit.
            </summary>
        </member>
        <member name="M:Svg.SvgUnit.ToDeviceValue(Svg.ISvgRenderer,Svg.UnitRenderingType,Svg.SvgElement)">
            <summary>
            Converts the current unit to one that can be used at render time.
            </summary>
            <param name="boundable">The container element used as the basis for calculations</param>
            <returns>The representation of the current unit in a device value (usually pixels).</returns>
        </member>
        <member name="M:Svg.SvgUnit.ToPercentage">
            <summary>
            Converts the current unit to a percentage, if applicable.
            </summary>
            <returns>An <see cref="T:Svg.SvgUnit"/> of type <see cref="!:SvgUnitType.Perscentage"/>.</returns>
        </member>
        <member name="M:Svg.SvgUnit.op_Implicit(Svg.SvgUnit)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:Svg.SvgUnit"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Svg.SvgUnit.op_Implicit(System.Single)~Svg.SvgUnit">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Svg.SvgUnit"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Svg.SvgUnit.#ctor(Svg.SvgUnitType,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgUnit"/> struct.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Svg.SvgUnit.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgUnit"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Svg.SvgUnitType">
            <summary>
            Defines the various types of unit an <see cref="T:Svg.SvgUnit"/> can be.
            </summary>
        </member>
        <member name="F:Svg.SvgUnitType.None">
            <summary>
            Indicates that the unit holds no value.
            </summary>
        </member>
        <member name="F:Svg.SvgUnitType.Pixel">
            <summary>
            Indicates that the unit is in pixels.
            </summary>
        </member>
        <member name="F:Svg.SvgUnitType.Em">
            <summary>
            Indicates that the unit is equal to the pt size of the current font.
            </summary>
        </member>
        <member name="F:Svg.SvgUnitType.Ex">
            <summary>
            Indicates that the unit is equal to the x-height of the current font.
            </summary>
        </member>
        <member name="F:Svg.SvgUnitType.Percentage">
            <summary>
            Indicates that the unit is a percentage.
            </summary>
        </member>
        <member name="F:Svg.SvgUnitType.User">
            <summary>
            Indicates that the unit has no unit identifier and is a value in the current user coordinate system.
            </summary>
        </member>
        <member name="F:Svg.SvgUnitType.Inch">
            <summary>
            Indicates the the unit is in inches.
            </summary>
        </member>
        <member name="F:Svg.SvgUnitType.Centimeter">
            <summary>
            Indicates that the unit is in centimeters.
            </summary>
        </member>
        <member name="F:Svg.SvgUnitType.Millimeter">
            <summary>
            Indicates that the unit is in millimeters.
            </summary>
        </member>
        <member name="F:Svg.SvgUnitType.Pica">
            <summary>
            Indicates that the unit is in picas.
            </summary>
        </member>
        <member name="F:Svg.SvgUnitType.Point">
            <summary>
            Indicates that the unit is in points, the smallest unit of measure, being a subdivision of the larger <see cref="F:Svg.SvgUnitType.Pica"/>. There are 12 points in the <see cref="F:Svg.SvgUnitType.Pica"/>.
            </summary>
        </member>
        <member name="P:Svg.SvgTextReader.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
            <value></value>
            <returns>The value returned depends on the <see cref="P:System.Xml.XmlTextReader.NodeType"/> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space within an xml:space= 'preserve' scope. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
        </member>
        <member name="P:Svg.SvgTextReader.LocalName">
            <summary>
            Gets the local name of the current node.
            </summary>
            <value></value>
            <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
        </member>
        <member name="M:Svg.SvgTextReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>
            true if there is a next attribute; false if there are no more attributes.
            </returns>
        </member>
        <member name="M:Svg.SvgTextReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>
            true if the next node was read successfully; false if there are no more nodes to read.
            </returns>
            <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
        </member>
        <member name="M:Svg.SvgTextReader.ResolveEntity">
            <summary>
            Resolves the entity reference for EntityReference nodes.
            </summary>
        </member>
        <member name="T:Svg.Text.FontFamily">
            <summary>
            http://stackoverflow.com/questions/3633000/net-enumerate-winforms-font-styles
            </summary>
        </member>
        <member name="P:Svg.SvgFontFace.FontFamily">
            <summary>
            Indicates which font family is to be used to render the text.
            </summary>
        </member>
        <member name="P:Svg.SvgFontFace.FontSize">
            <summary>
            Refers to the size of the font from baseline to baseline when multiple lines of text are set solid in a multiline layout environment.
            </summary>
        </member>
        <member name="P:Svg.SvgFontFace.FontStyle">
            <summary>
            Refers to the style of the font.
            </summary>
        </member>
        <member name="P:Svg.SvgFontFace.FontVariant">
            <summary>
            Refers to the varient of the font.
            </summary>
        </member>
        <member name="P:Svg.SvgFontFace.FontWeight">
            <summary>
            Refers to the boldness of the font.
            </summary>
        </member>
        <member name="P:Svg.SvgGlyph.PathData">
            <summary>
            Gets or sets a <see cref="T:Svg.Pathing.SvgPathSegmentList"/> of path data.
            </summary>
        </member>
        <member name="M:Svg.SvgGlyph.Path(Svg.ISvgRenderer)">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
        </member>
        <member name="P:Svg.SvgGlyph.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Svg.SvgGlyph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgGlyph"/> class.
            </summary>
        </member>
        <member name="T:Svg.SvgText">
            <summary>
            The <see cref="T:Svg.SvgText"/> element defines a graphics element consisting of text.
            </summary>
        </member>
        <member name="M:Svg.SvgText.#ctor">
            <summary>
            Initializes the <see cref="T:Svg.SvgText"/> class.
            </summary>
        </member>
        <member name="M:Svg.SvgText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.SvgText"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Svg.SvgTextBase.Text">
            <summary>
            Gets or sets the text to be rendered.
            </summary>
        </member>
        <member name="P:Svg.SvgTextBase.TextAnchor">
            <summary>
            Gets or sets the text anchor.
            </summary>
            <value>The text anchor.</value>
        </member>
        <member name="P:Svg.SvgTextBase.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:Svg.SvgTextBase.Dx">
            <summary>
            Gets or sets the dX.
            </summary>
            <value>The dX.</value>
        </member>
        <member name="P:Svg.SvgTextBase.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="P:Svg.SvgTextBase.Dy">
            <summary>
            Gets or sets the dY.
            </summary>
            <value>The dY.</value>
        </member>
        <member name="P:Svg.SvgTextBase.Rotate">
            <summary>
            Gets or sets the rotate.
            </summary>
            <value>The rotate.</value>
        </member>
        <member name="P:Svg.SvgTextBase.TextLength">
            <summary>
            The pre-calculated length of the text
            </summary>
        </member>
        <member name="P:Svg.SvgTextBase.LengthAdjust">
            <summary>
            Gets or sets the text anchor.
            </summary>
            <value>The text anchor.</value>
        </member>
        <member name="P:Svg.SvgTextBase.LetterSpacing">
            <summary>
            Specifies spacing behavior between text characters.
            </summary>
        </member>
        <member name="P:Svg.SvgTextBase.WordSpacing">
            <summary>
            Specifies spacing behavior between words.
            </summary>
        </member>
        <member name="P:Svg.SvgTextBase.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <remarks>
            <para>Unlike other <see cref="!:SvgGraphicsElement"/>s, <see cref="T:Svg.SvgText"/> has a default fill of black rather than transparent.</para>
            </remarks>
            <value>The fill.</value>
        </member>
        <member name="M:Svg.SvgTextBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Svg.SvgTextBase.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Svg.SvgTextBase.Render(Svg.ISvgRenderer)">
            <summary>
            Renders the <see cref="T:Svg.SvgElement"/> and contents to the specified <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> object to render to.</param>
            <remarks>Necessary to make sure that any internal tspan elements get rendered as well</remarks>
        </member>
        <member name="M:Svg.SvgTextBase.Path(Svg.ISvgRenderer)">
            <summary>
            Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="M:Svg.SvgTextBase.SetPath(Svg.SvgTextBase.TextDrawingState,System.Boolean)">
            <summary>
            Sets the path on this element and all child elements.  Uses the state
            object to track the state of the drawing
            </summary>
            <param name="state">State of the drawing operation</param>
        </member>
        <member name="M:Svg.SvgTextBase.PrepareText(System.String)">
            <summary>
            Prepare the text according to the whitespace handling rules.  <see href="http://www.w3.org/TR/SVG/text.html">SVG Spec</see>.
            </summary>
            <param name="value">Text to be prepared</param>
            <returns>Prepared text</returns>
        </member>
        <member name="M:Svg.SvgTextBase.ShouldWriteElement">
            <summary>Empty text elements are not legal - only write this element if it has children.</summary>
        </member>
        <member name="T:Svg.SvgTextAnchor">
            <summary>
            Text anchor is used to align (start-, middle- or end-alignment) a string of text relative to a given point.
            </summary>
        </member>
        <member name="F:Svg.SvgTextAnchor.Inherit">
            <summary>The value is inherited from the parent element.</summary>
        </member>
        <member name="F:Svg.SvgTextAnchor.Start">
            <summary>
            The rendered characters are aligned such that the start of the text string is at the initial current text position.
            </summary>
        </member>
        <member name="F:Svg.SvgTextAnchor.Middle">
            <summary>
            The rendered characters are aligned such that the middle of the text string is at the current text position.
            </summary>
        </member>
        <member name="F:Svg.SvgTextAnchor.End">
            <summary>
            The rendered characters are aligned such that the end of the text string is at the initial current text position.
            </summary>
        </member>
        <member name="T:Svg.SvgTextPath">
            <summary>
            The <see cref="T:Svg.SvgText"/> element defines a graphics element consisting of text.
            </summary>
        </member>
        <member name="M:Svg.PathStatistics.CubicBezierSegment.GaussianQuadrature(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Evaluates the integral of the function over the integral using the specified number of points
            </summary>
            <param name="func"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="points"></param>
        </member>
        <member name="M:Svg.PathStatistics.CubicBezierSegment.CubicBezierCurve(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Double)">
            <remarks>http://en.wikipedia.org/wiki/B%C3%A9zier_curve</remarks>
        </member>
        <member name="M:Svg.PathStatistics.CubicBezierSegment.CubicBezierDerivative(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Double)">
            <remarks>http://www.cs.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/Bezier/bezier-der.html</remarks>
        </member>
        <member name="T:Svg.ISvgTransformable">
            <summary>
            Represents and element that may be transformed.
            </summary>
        </member>
        <member name="P:Svg.ISvgTransformable.Transforms">
            <summary>
            Gets or sets an <see cref="T:Svg.Transforms.SvgTransformCollection"/> of element transforms.
            </summary>
        </member>
        <member name="M:Svg.ISvgTransformable.PushTransforms(Svg.ISvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:Svg.ISvgTransformable.PopTransforms(Svg.ISvgRenderer)">
            <summary>
            Removes any previously applied transforms from the specified <see cref="T:Svg.ISvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Svg.ISvgRenderer"/> that should have transforms removed.</param>
        </member>
        <member name="T:Svg.Transforms.SvgMatrix">
            <summary>
            The class which applies custom transform to this Matrix (Required for projects created by the Inkscape).
            </summary>
        </member>
        <member name="T:Svg.Transforms.SvgShear">
            <summary>
            The class which applies the specified shear vector to this Matrix.
            </summary>
        </member>
        <member name="T:Svg.Transforms.SvgSkew">
            <summary>
            The class which applies the specified skew vector to this Matrix.
            </summary>
        </member>
        <member name="M:Svg.Transforms.SvgTransformCollection.GetMatrix">
            <summary>
            Multiplies all matrices
            </summary>
            <returns>The result of all transforms</returns>
        </member>
        <member name="E:Svg.Transforms.SvgTransformCollection.TransformChanged">
            <summary>
            Fired when an SvgTransform has changed
            </summary>
        </member>
        <member name="M:Svg.Transforms.SvgTransformConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Svg.Web.SvgHandler">
            <summary>
            A handler to asynchronously render Scalable Vector Graphics files (usually *.svg or *.xml file extensions).
            </summary>
            <remarks>
            <para>If a crawler requests the SVG file the raw XML will be returned rather than the image to allow crawlers to better read the image.</para>
            <para>Adding "?raw=true" to the querystring will alos force the handler to render the raw SVG.</para>
            </remarks>
        </member>
        <member name="P:Svg.Web.SvgHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="M:Svg.Web.SvgHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="M:Svg.Web.SvgHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
            <summary>
            Initiates an asynchronous call to the HTTP handler.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
            <param name="cb">The <see cref="T:System.AsyncCallback"/> to call when the asynchronous method call is complete. If <paramref name="cb"/> is null, the delegate is not called.</param>
            <param name="extraData">Any extra data needed to process the request.</param>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that contains information about the status of the process.
            </returns>
        </member>
        <member name="M:Svg.Web.SvgHandler.EndProcessRequest(System.IAsyncResult)">
            <summary>
            Provides an asynchronous process End method when the process ends.
            </summary>
            <param name="result">An <see cref="T:System.IAsyncResult"/> that contains information about the status of the process.</param>
        </member>
        <member name="T:Svg.Web.SvgHandler.SvgAsyncRender">
            <summary>
            The class to be used when 
            </summary>
        </member>
        <member name="T:Svg.Web.SvgHandler.SvgAsyncRenderState">
            <summary>
            Represents the state of a request for SVG rendering.
            </summary>
        </member>
        <member name="M:Svg.Web.SvgHandler.SvgAsyncRenderState.#ctor(System.Web.HttpContext,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Svg.Web.SvgHandler.SvgAsyncRenderState"/> class.
            </summary>
            <param name="context">The <see cref="T:System.Web.HttpContext"/> of the request.</param>
            <param name="callback">The delegate to be called when the rendering is complete.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:Svg.Web.SvgHandler.SvgAsyncRenderState.CompleteRequest">
            <summary>
            Indicates that the rendering is complete and the waiting thread may proceed.
            </summary>
        </member>
        <member name="P:Svg.Web.SvgHandler.SvgAsyncRenderState.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <value></value>
            <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
        </member>
        <member name="P:Svg.Web.SvgHandler.SvgAsyncRenderState.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
            <value></value>
            <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
        </member>
        <member name="P:Svg.Web.SvgHandler.SvgAsyncRenderState.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
            <value></value>
            <returns>true if the operation is complete; otherwise, false.</returns>
        </member>
        <member name="P:Svg.Web.SvgHandler.SvgAsyncRenderState.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</returns>
        </member>
        <member name="M:ExCSS.Model.Specification.IsNonPrintable(System.Char)">
            The maximum allowed codepoint (defined in Unicode).
        </member>
        <member name="M:ExCSS.HtmlColor.ToCss(System.Boolean)">
            <summary>
            Return the shortest form possible
            </summary>
        </member>
        <member name="T:ExCSS.TermList.TermSeparator">
            <summary>
            exposed enumeration for the adding of separators into term lists
            </summary>
        </member>
        <member name="T:Fizzler.HumanReadableSelectorGenerator">
            <summary>
            An <see cref="T:Fizzler.ISelectorGenerator"/> implementation that generates
            human-readable description of the selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.OnInit">
            <summary>
            Initializes the text.
            </summary>
        </member>
        <member name="P:Fizzler.HumanReadableSelectorGenerator.Text">
            <summary>
            Gets the generated human-readable description text.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.OnSelector">
            <summary>
            Generates human-readable for a selector in a group.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.OnClose">
            <summary>
            Concludes the text.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.Add(System.String)">
            <summary>
            Adds to the generated human-readable text.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.Type(Fizzler.NamespacePrefix,System.String)">
            <summary>
            Generates human-readable text of this type selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.Universal(Fizzler.NamespacePrefix)">
            <summary>
            Generates human-readable text of this universal selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.Id(System.String)">
            <summary>
            Generates human-readable text of this ID selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.Fizzler#ISelectorGenerator#Class(System.String)">
            <summary>
            Generates human-readable text of this class selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.AttributeExists(Fizzler.NamespacePrefix,System.String)">
            <summary>
            Generates human-readable text of this attribute selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.AttributeExact(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates human-readable text of this attribute selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.AttributeIncludes(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates human-readable text of this attribute selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.AttributeDashMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates human-readable text of this attribute selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.AttributePrefixMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates human-readable text of this attribute selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.AttributeSuffixMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates human-readable text of this attribute selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.AttributeSubstring(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates human-readable text of this attribute selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.FirstChild">
            <summary>
            Generates human-readable text of this pseudo-class selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.LastChild">
            <summary>
            Generates human-readable text of this pseudo-class selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.NthChild(System.Int32,System.Int32)">
            <summary>
            Generates human-readable text of this pseudo-class selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.OnlyChild">
            <summary>
            Generates human-readable text of this pseudo-class selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.Empty">
            <summary>
            Generates human-readable text of this pseudo-class selector.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.Child">
            <summary>
            Generates human-readable text of this combinator.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.Descendant">
            <summary>
            Generates human-readable text of this combinator.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.Adjacent">
            <summary>
            Generates human-readable text of this combinator.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.GeneralSibling">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which separates two sequences of simple selectors. The elements represented
            by the two sequences share the same parent in the document tree and the
            element represented by the first sequence precedes (not necessarily
            immediately) the element represented by the second one.
            </summary>
        </member>
        <member name="M:Fizzler.HumanReadableSelectorGenerator.NthLastChild(System.Int32,System.Int32)">
            <summary>
            Generates human-readable text of this combinator.
            </summary>
        </member>
        <member name="T:Fizzler.IElementOps`1">
            <summary>
            Represents a selectors implementation for an arbitrary document/node system.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.Type(Fizzler.NamespacePrefix,System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#type-selectors">type selector</a>,
            which represents an instance of the element type in the document tree. 
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.Universal(Fizzler.NamespacePrefix)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#universal-selector">universal selector</a>,
            any single element in the document tree in any namespace 
            (including those without a namespace) if no default namespace 
            has been specified for selectors. 
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.Id(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#Id-selectors">ID selector</a>,
            which represents an element instance that has an identifier that 
            matches the identifier in the ID selector.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.Class(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#class-html">class selector</a>,
            which is an alternative <see cref="M:Fizzler.IElementOps`1.AttributeIncludes(Fizzler.NamespacePrefix,System.String,System.String)"/> when 
            representing the <c>class</c> attribute. 
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.AttributeExists(Fizzler.NamespacePrefix,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            whatever the values of the attribute.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.AttributeExact(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            and whose value is exactly <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.AttributeIncludes(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            and whose value is a whitespace-separated list of words, one of 
            which is exactly <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.AttributeDashMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>,
            its value either being exactly <paramref name="value"/> or beginning 
            with <paramref name="value"/> immediately followed by "-" (U+002D).
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.AttributePrefixMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value begins with the prefix <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.AttributeSuffixMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value ends with the suffix <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.AttributeSubstring(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value contains at least one instance of the substring <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.FirstChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the first child of some other element.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.LastChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the last child of some other element.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.NthChild(System.Int32,System.Int32)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the N-th child of some other element.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.OnlyChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that has a parent element and whose parent 
            element has no other element children.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.Empty">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that has no children at all.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.Child">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents a childhood relationship between two elements.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.Descendant">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents a relationship between two elements where one element is an 
            arbitrary descendant of some ancestor element.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.Adjacent">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents elements that share the same parent in the document tree and 
            where the first element immediately precedes the second element.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.GeneralSibling">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which separates two sequences of simple selectors. The elements represented
            by the two sequences share the same parent in the document tree and the
            element represented by the first sequence precedes (not necessarily
            immediately) the element represented by the second one.
            </summary>
        </member>
        <member name="M:Fizzler.IElementOps`1.NthLastChild(System.Int32,System.Int32)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the N-th child from bottom up of some other element.
            </summary>
        </member>
        <member name="T:Fizzler.ISelectorGenerator">
            <summary>
            Represent an implementation that is responsible for generating
            an implementation for a selector.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.OnInit">
            <summary>
            Delimits the initialization of a generation.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.OnClose">
            <summary>
            Delimits the closing/conclusion of a generation.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.OnSelector">
            <summary>
            Delimits a selector generation in a group of selectors.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.Type(Fizzler.NamespacePrefix,System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#type-selectors">type selector</a>,
            which represents an instance of the element type in the document tree. 
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.Universal(Fizzler.NamespacePrefix)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#universal-selector">universal selector</a>,
            any single element in the document tree in any namespace 
            (including those without a namespace) if no default namespace 
            has been specified for selectors. 
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.Id(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#Id-selectors">ID selector</a>,
            which represents an element instance that has an identifier that 
            matches the identifier in the ID selector.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.Class(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#class-html">class selector</a>,
            which is an alternative <see cref="M:Fizzler.ISelectorGenerator.AttributeIncludes(Fizzler.NamespacePrefix,System.String,System.String)"/> when 
            representing the <c>class</c> attribute. 
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.AttributeExists(Fizzler.NamespacePrefix,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            whatever the values of the attribute.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.AttributeExact(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            and whose value is exactly <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.AttributeIncludes(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            and whose value is a whitespace-separated list of words, one of 
            which is exactly <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.AttributeDashMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>,
            its value either being exactly <paramref name="value"/> or beginning 
            with <paramref name="value"/> immediately followed by "-" (U+002D).
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.AttributePrefixMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value begins with the prefix <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.AttributeSuffixMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value ends with the suffix <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.AttributeSubstring(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value contains at least one instance of the substring <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.FirstChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the first child of some other element.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.LastChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the last child of some other element.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.NthChild(System.Int32,System.Int32)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the N-th child of some other element.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.OnlyChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that has a parent element and whose parent 
            element has no other element children.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.Empty">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that has no children at all.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.Child">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents a childhood relationship between two elements.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.Descendant">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents a relationship between two elements where one element is an 
            arbitrary descendant of some ancestor element.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.Adjacent">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents elements that share the same parent in the document tree and 
            where the first element immediately precedes the second element.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.GeneralSibling">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which separates two sequences of simple selectors. The elements represented
            by the two sequences share the same parent in the document tree and the
            element represented by the first sequence precedes (not necessarily
            immediately) the element represented by the second one.
            </summary>
        </member>
        <member name="M:Fizzler.ISelectorGenerator.NthLastChild(System.Int32,System.Int32)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the N-th child from bottom up of some other element.
            </summary>
        </member>
        <member name="T:Fizzler.NamespacePrefix">
            <summary>
            Represent a type or attribute name.
            </summary>
        </member>
        <member name="F:Fizzler.NamespacePrefix.None">
            <summary>
            Represents a name from either the default or any namespace 
            in a target document, depending on whether a default namespace is
            in effect or not.
            </summary>
        </member>
        <member name="F:Fizzler.NamespacePrefix.Empty">
            <summary>
            Represents an empty namespace.
            </summary>
        </member>
        <member name="F:Fizzler.NamespacePrefix.Any">
            <summary>
            Represents any namespace.
            </summary>
        </member>
        <member name="M:Fizzler.NamespacePrefix.#ctor(System.String)">
            <summary>
            Initializes an instance with a namespace prefix specification.
            </summary>
        </member>
        <member name="P:Fizzler.NamespacePrefix.Text">
            <summary>
            Gets the raw text value of this instance.
            </summary>
        </member>
        <member name="P:Fizzler.NamespacePrefix.IsNone">
            <summary>
            Indicates whether this instance represents a name
            from either the default or any namespace in a target
            document, depending on whether a default namespace is
            in effect or not.
            </summary>
        </member>
        <member name="P:Fizzler.NamespacePrefix.IsAny">
            <summary>
            Indicates whether this instance represents a name
            from any namespace (including one without one)
            in a target document.
            </summary>
        </member>
        <member name="P:Fizzler.NamespacePrefix.IsEmpty">
            <summary>
            Indicates whether this instance represents a name
            without a namespace in a target document.
            </summary>
        </member>
        <member name="P:Fizzler.NamespacePrefix.IsSpecific">
            <summary>
            Indicates whether this instance represents a name from a 
            specific namespace or not.
            </summary>
        </member>
        <member name="M:Fizzler.NamespacePrefix.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:Fizzler.NamespacePrefix.Equals(Fizzler.NamespacePrefix)">
            <summary>
            Indicates whether this instance and another are equal.
            </summary>
        </member>
        <member name="M:Fizzler.NamespacePrefix.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Fizzler.NamespacePrefix.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
        </member>
        <member name="M:Fizzler.NamespacePrefix.Format(System.String)">
            <summary>
            Formats this namespace together with a name.
            </summary>
        </member>
        <member name="T:Fizzler.Parser">
            <summary>
            Semantic parser for CSS selector grammar.
            </summary>
        </member>
        <member name="M:Fizzler.Parser.Parse``1(System.String,``0)">
            <summary>
            Parses a CSS selector group and generates its implementation.
            </summary>
        </member>
        <member name="M:Fizzler.Parser.Parse``2(System.String,``0,System.Func{``0,``1})">
            <summary>
            Parses a CSS selector group and generates its implementation.
            </summary>
        </member>
        <member name="M:Fizzler.Parser.Parse``1(System.Collections.Generic.IEnumerable{Fizzler.Token},``0)">
            <summary>
            Parses a tokenized stream representing a CSS selector group and 
            generates its implementation.
            </summary>
        </member>
        <member name="M:Fizzler.Parser.Parse``2(System.Collections.Generic.IEnumerable{Fizzler.Token},``0,System.Func{``0,``1})">
            <summary>
            Parses a tokenized stream representing a CSS selector group and 
            generates its implementation.
            </summary>
        </member>
        <member name="T:Fizzler.Reader`1">
            <summary>
            Adds reading semantics to a base <see cref="T:System.Collections.Generic.IEnumerator`1"/> with the 
            option to un-read and insert new elements while consuming the source.
            </summary>
        </member>
        <member name="M:Fizzler.Reader`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialize a new <see cref="T:Fizzler.Reader`1"/> with a base
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> object.
            </summary>
        </member>
        <member name="M:Fizzler.Reader`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initialize a new <see cref="T:Fizzler.Reader`1"/> with a base
            <see cref="T:System.Collections.Generic.IEnumerator`1"/> object.
            </summary>
        </member>
        <member name="P:Fizzler.Reader`1.HasMore">
            <summary>
            Indicates whether there is, at least, one value waiting to be read or not.
            </summary>
        </member>
        <member name="M:Fizzler.Reader`1.Unread(`0)">
            <summary>
            Pushes back a new value that will be returned on the next read.
            </summary>
        </member>
        <member name="M:Fizzler.Reader`1.Read">
            <summary>
            Reads and returns the next value.
            </summary>
        </member>
        <member name="M:Fizzler.Reader`1.Peek">
            <summary>
            Peeks the next value waiting to be read.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there is no value waiting to be read.
            </exception>
        </member>
        <member name="M:Fizzler.Reader`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the remaining
            values to be read.
            </summary>
        </member>
        <member name="M:Fizzler.Reader`1.Close">
            <summary>
            Disposes the enumerator used to initialize this object
            if that enumerator supports <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:Fizzler.Selector`1">
            <summary>
            Represents a selector implementation over an arbitrary type of elements.
            </summary>
        </member>
        <member name="T:Fizzler.SelectorGenerator`1">
            <summary>
            A selector generator implementation for an arbitrary document/element system.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.#ctor(Fizzler.IElementOps{`0})">
            <summary>
            Initializes a new instance of this object with an instance
            of <see cref="T:Fizzler.IElementOps`1"/> and the default equality
            comparer that is used for determining if two elements are equal.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.#ctor(Fizzler.IElementOps{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of this object with an instance
            of <see cref="T:Fizzler.IElementOps`1"/> and an equality comparer
            used for determining if two elements are equal.
            </summary>
        </member>
        <member name="P:Fizzler.SelectorGenerator`1.Selector">
            <summary>
            Gets the selector implementation.
            </summary>
            <remarks>
            If the generation is not complete, this property returns the 
            last generated selector.
            </remarks>
        </member>
        <member name="P:Fizzler.SelectorGenerator`1.Ops">
            <summary>
            Gets the <see cref="T:Fizzler.IElementOps`1"/> instance that this object
            was initialized with.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.GetSelectors">
            <summary>
            Returns the collection of selector implementations representing 
            a group.
            </summary>
            <remarks>
            If the generation is not complete, this method return the 
            selectors generated so far in a group.
            </remarks>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.Add(Fizzler.Selector{`0})">
            <summary>
            Adds a generated selector.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.OnInit">
            <summary>
            Delimits the initialization of a generation.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.OnSelector">
            <summary>
            Delimits a selector generation in a group of selectors.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.OnClose">
            <summary>
            Delimits the closing/conclusion of a generation.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.Id(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#Id-selectors">ID selector</a>,
            which represents an element instance that has an identifier that 
            matches the identifier in the ID selector.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.Class(System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#class-html">class selector</a>,
            which is an alternative <see cref="M:Fizzler.ISelectorGenerator.AttributeIncludes(Fizzler.NamespacePrefix,System.String,System.String)"/> when 
            representing the <c>class</c> attribute. 
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.Type(Fizzler.NamespacePrefix,System.String)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#type-selectors">type selector</a>,
            which represents an instance of the element type in the document tree. 
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.Universal(Fizzler.NamespacePrefix)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#universal-selector">universal selector</a>,
            any single element in the document tree in any namespace 
            (including those without a namespace) if no default namespace 
            has been specified for selectors. 
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.AttributeExists(Fizzler.NamespacePrefix,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            whatever the values of the attribute.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.AttributeExact(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            and whose value is exactly <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.AttributeIncludes(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>
            and whose value is a whitespace-separated list of words, one of 
            which is exactly <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.AttributeDashMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the given attribute <paramref name="name"/>,
            its value either being exactly <paramref name="value"/> or beginning 
            with <paramref name="value"/> immediately followed by "-" (U+002D).
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.AttributePrefixMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value begins with the prefix <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.AttributeSuffixMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value ends with the suffix <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.AttributeSubstring(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Generates an <a href="http://www.w3.org/TR/css3-selectors/#attribute-selectors">attribute selector</a>
            that represents an element with the attribute <paramref name="name"/> 
            whose value contains at least one instance of the substring <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.FirstChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the first child of some other element.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.LastChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the last child of some other element.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.NthChild(System.Int32,System.Int32)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the N-th child of some other element.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.OnlyChild">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that has a parent element and whose parent 
            element has no other element children.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.Empty">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that has no children at all.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.Child">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents a childhood relationship between two elements.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.Descendant">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents a relationship between two elements where one element is an 
            arbitrary descendant of some ancestor element.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.Adjacent">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which represents elements that share the same parent in the document tree and 
            where the first element immediately precedes the second element.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.GeneralSibling">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#combinators">combinator</a>,
            which separates two sequences of simple selectors. The elements represented
            by the two sequences share the same parent in the document tree and the
            element represented by the first sequence precedes (not necessarily
            immediately) the element represented by the second one.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGenerator`1.NthLastChild(System.Int32,System.Int32)">
            <summary>
            Generates a <a href="http://www.w3.org/TR/css3-selectors/#pseudo-classes">pseudo-class selector</a>,
            which represents an element that is the N-th child from bottom up of some other element.
            </summary>
        </member>
        <member name="T:Fizzler.SelectorGeneratorTee">
            <summary>
            An <see cref="T:Fizzler.ISelectorGenerator"/> implementation that delegates
            to two other <see cref="T:Fizzler.ISelectorGenerator"/> objects, which
            can be useful for doing work in a single pass.
            </summary>
        </member>
        <member name="P:Fizzler.SelectorGeneratorTee.Primary">
            <summary>
            Gets the first generator used to initialize this generator.
            </summary>
        </member>
        <member name="P:Fizzler.SelectorGeneratorTee.Secondary">
            <summary>
            Gets the second generator used to initialize this generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.#ctor(Fizzler.ISelectorGenerator,Fizzler.ISelectorGenerator)">
            <summary>
            Initializes a new instance of <see cref="T:Fizzler.SelectorGeneratorTee"/>
            with the two other <see cref="T:Fizzler.ISelectorGenerator"/> objects
            it delegates to.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.OnInit">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.OnClose">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.OnSelector">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.Type(Fizzler.NamespacePrefix,System.String)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.Universal(Fizzler.NamespacePrefix)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.Id(System.String)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.Class(System.String)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.AttributeExists(Fizzler.NamespacePrefix,System.String)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.AttributeExact(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.AttributeIncludes(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.AttributeDashMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.AttributePrefixMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.AttributeSuffixMatch(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.AttributeSubstring(Fizzler.NamespacePrefix,System.String,System.String)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.FirstChild">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.LastChild">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.NthChild(System.Int32,System.Int32)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.OnlyChild">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.Empty">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.Child">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.Descendant">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.Adjacent">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.GeneralSibling">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorGeneratorTee.NthLastChild(System.Int32,System.Int32)">
            <summary>
            Delegates to <see cref="P:Fizzler.SelectorGeneratorTee.Primary"/> then <see cref="P:Fizzler.SelectorGeneratorTee.Secondary"/> generator.
            </summary>
        </member>
        <member name="T:Fizzler.SelectorsCachingCompiler">
            <summary>
            Implementation for a selectors compiler that supports caching.
            </summary>
            <remarks>
            This class is primarily targeted for developers of selection
            over an arbitrary document model.
            </remarks>
        </member>
        <member name="M:Fizzler.SelectorsCachingCompiler.Create``1(System.Func{System.String,``0})">
            <summary>
            Creates a caching selectors compiler on top on an existing compiler.
            </summary>
        </member>
        <member name="M:Fizzler.SelectorsCachingCompiler.Create``1(System.Func{System.String,``0},System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Creates a caching selectors compiler on top on an existing compiler.
            An addition parameter specified a dictionary to use as the cache.
            </summary>
            <remarks>
            If <paramref name="cache"/> is <c>null</c> then this method uses a
            the <see cref="T:System.Collections.Generic.Dictionary`2"/> implementation with an 
            ordinally case-insensitive selectors text comparer.
            </remarks>
        </member>
        <member name="T:Fizzler.Token">
            <summary>
            Represent a token and optionally any text associated with it.
            </summary>
        </member>
        <member name="P:Fizzler.Token.Kind">
            <summary>
            Gets the kind/type/class of the token.
            </summary>
        </member>
        <member name="P:Fizzler.Token.Text">
            <summary>
            Gets text, if any, associated with the token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Eoi">
            <summary>
            Creates an end-of-input token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Star">
            <summary>
            Creates a star token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Dot">
            <summary>
            Creates a dot token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Colon">
            <summary>
            Creates a colon token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Comma">
            <summary>
            Creates a comma token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.RightParenthesis">
            <summary>
            Creates a right parenthesis token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Equals">
            <summary>
            Creates an equals token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.LeftBracket">
            <summary>
            Creates a left bracket token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.RightBracket">
            <summary>
            Creates a right bracket token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Pipe">
            <summary>
            Creates a pipe (vertical line) token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Plus">
            <summary>
            Creates a plus token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Greater">
            <summary>
            Creates a greater token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Includes">
            <summary>
            Creates an includes token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.DashMatch">
            <summary>
            Creates a dash-match token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.PrefixMatch">
            <summary>
            Creates a prefix-match token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.SuffixMatch">
            <summary>
            Creates a suffix-match token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.SubstringMatch">
            <summary>
            Creates a substring-match token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Tilde">
            <summary>
            Creates a general sibling token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Ident(System.String)">
            <summary>
            Creates an identifier token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Integer(System.String)">
            <summary>
            Creates an integer token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Hash(System.String)">
            <summary>
            Creates a hash-name token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.WhiteSpace(System.String)">
            <summary>
            Creates a white-space token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.String(System.String)">
            <summary>
            Creates a string token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Function(System.String)">
            <summary>
            Creates a function token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Char(System.Char)">
            <summary>
            Creates an arbitrary character token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:Fizzler.Token.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Fizzler.Token.Equals(Fizzler.Token)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
        </member>
        <member name="M:Fizzler.Token.ToString">
            <summary>
            Gets a string representation of the token.
            </summary>
        </member>
        <member name="M:Fizzler.Token.op_Equality(Fizzler.Token,Fizzler.Token)">
            <summary>
            Performs a logical comparison of the two tokens to determine 
            whether they are equal. 
            </summary>
        </member>
        <member name="M:Fizzler.Token.op_Inequality(Fizzler.Token,Fizzler.Token)">
            <summary>
            Performs a logical comparison of the two tokens to determine 
            whether they are inequal. 
            </summary>
        </member>
        <member name="T:Fizzler.Tokener">
            <summary>
            Lexer for tokens in CSS selector grammar.
            </summary>
        </member>
        <member name="M:Fizzler.Tokener.Tokenize(System.IO.TextReader)">
            <summary>
            Parses tokens from a given text source.
            </summary>
        </member>
        <member name="M:Fizzler.Tokener.Tokenize(System.String)">
            <summary>
            Parses tokens from a given string.
            </summary>
        </member>
        <member name="T:Fizzler.TokenKind">
            <summary>
            Represents the classification of a token.
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.Eoi">
            <summary>
            Represents end of input/file/stream
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.Ident">
            <summary>
            Represents {ident}
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.Hash">
            <summary>
            Represents "#" {name}
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.Includes">
            <summary>
            Represents "~="
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.DashMatch">
            <summary>
            Represents "|="
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.PrefixMatch">
            <summary>
            Represents "^="
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.SuffixMatch">
            <summary>
            Represents "$="
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.SubstringMatch">
            <summary>
            Represents "*="
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.String">
            <summary>
            Represents {string}
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.Plus">
            <summary>
            Represents S* "+"
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.Greater">
            <summary>
            Represents S* ">"
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.WhiteSpace">
            <summary>
            Represents [ \t\r\n\f]+
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.Function">
            <summary>
            Represents {ident} ")"
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.Integer">
            <summary>
            Represents [0-9]+
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.Tilde">
            <summary>
            Represents S* "~"
            </summary>
        </member>
        <member name="F:Fizzler.TokenKind.Char">
            <summary>
            Represents an arbitrary character
            </summary>
        </member>
    </members>
</doc>
